{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview What is OccuPy The primary purpose of OccuPy is to estimate the local scale of cryo-EM maps. What does the 'local scale' mean? In simple terms, think of it as the range of pixels values. In well-resolved regions, contrast is high, and we expect very bright and very dark pixels. If that region has decreased resolution or occupancy, we expect decreased contrast and a narrower range of pixel values. The limit is solvent, which has Gaussian distribution. OccuPy was built to estimate this 'scale', to quantify relative contrast degradation. This means that it can estimate the relative resolution, or occupancy. OccuPy also uses this scale as a tool for map modification. In essence, OccuPy locates the region that exhibits the highest range of pixel values, and utilizes this to place all other regions on a nominal scale between 0 and 1. Disclaimer SPA or STA, but no single tomo OccuPy is only applicable to reconstructions produced by ensemble averaging, like SPA and STA. That is, it is incompatible with analysis of a single tomogram. This is not postprocessing OccuPy does not sharpen maps. It tries not to. No number for your abstract OccuPy will not provide an absolute local resolution in \u00c5, only a relative local resolution. Why estimate local scale? The local scale contains information about both resolution and occupancy. With this in mind, OccuPy is designed to estimate the local scale extremely fast without half-sets without GPUs without masks The reason for this is that it is intended to be compatible with the expectation maximization (fast) maximum likelihood classifiers (no half-sets) based on prior alignments (no GPUs), and be compatible with unbiased discovery of macromolecular heterogeneity and/or components (no masks). In this context, it will provide ways to weight data and/or provide a displacement vector to emphasize macromolecular resolution and/or occupancy during gradient descent. Basically, it needs to be fast enough to run repeatedly without delaying processing, and simple enough to use that it needs no input other than a cryo-EM map. The gist OccuPy is currently implemented as a GUI and command-line tool using open-source python libraries, to facilitate visualization of partial occupancy and the relative resolution of cryo-EM reconstructions by e.g implementing map modification as spatial filtering based on the estimated partial occupancy of local map components. This is intended to create maps that emulate reconstruction expected if the input (image) data was more homogenous at lower or higher occupancy.","title":"Introduction"},{"location":"#overview","text":"","title":"Overview"},{"location":"#what-is-occupy","text":"The primary purpose of OccuPy is to estimate the local scale of cryo-EM maps. What does the 'local scale' mean? In simple terms, think of it as the range of pixels values. In well-resolved regions, contrast is high, and we expect very bright and very dark pixels. If that region has decreased resolution or occupancy, we expect decreased contrast and a narrower range of pixel values. The limit is solvent, which has Gaussian distribution. OccuPy was built to estimate this 'scale', to quantify relative contrast degradation. This means that it can estimate the relative resolution, or occupancy. OccuPy also uses this scale as a tool for map modification. In essence, OccuPy locates the region that exhibits the highest range of pixel values, and utilizes this to place all other regions on a nominal scale between 0 and 1.","title":"What is OccuPy"},{"location":"#disclaimer","text":"SPA or STA, but no single tomo OccuPy is only applicable to reconstructions produced by ensemble averaging, like SPA and STA. That is, it is incompatible with analysis of a single tomogram. This is not postprocessing OccuPy does not sharpen maps. It tries not to. No number for your abstract OccuPy will not provide an absolute local resolution in \u00c5, only a relative local resolution.","title":"Disclaimer"},{"location":"#why-estimate-local-scale","text":"The local scale contains information about both resolution and occupancy. With this in mind, OccuPy is designed to estimate the local scale extremely fast without half-sets without GPUs without masks The reason for this is that it is intended to be compatible with the expectation maximization (fast) maximum likelihood classifiers (no half-sets) based on prior alignments (no GPUs), and be compatible with unbiased discovery of macromolecular heterogeneity and/or components (no masks). In this context, it will provide ways to weight data and/or provide a displacement vector to emphasize macromolecular resolution and/or occupancy during gradient descent. Basically, it needs to be fast enough to run repeatedly without delaying processing, and simple enough to use that it needs no input other than a cryo-EM map.","title":"Why estimate local scale?"},{"location":"#the-gist","text":"OccuPy is currently implemented as a GUI and command-line tool using open-source python libraries, to facilitate visualization of partial occupancy and the relative resolution of cryo-EM reconstructions by e.g implementing map modification as spatial filtering based on the estimated partial occupancy of local map components. This is intended to create maps that emulate reconstruction expected if the input (image) data was more homogenous at lower or higher occupancy.","title":"The gist"},{"location":"about/","text":"About Developers Bjoern O. Forsberg Pranav Shah Alister Burt Primary citation If you find OccuPy useful for any purpose, plaese refer to it and formally cite it: TBD Acknowledgements OccuPy is deployed to PyPi using github and github workflows . The sigmoid function originates from Prof. Werner Antweiler . The documentation format is readthedocs , using MkDocs-material , based on a configuration by Talley Lambert. OccuPy is built purely in python. At it's core, it uses numpy , scipy and matplotlib . Additional features utilize scikit-image . I/O is handled by mrcfile , and the command-line interface uses typer . The GUI was built in PyQt5, using Qt5 designer.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#developers","text":"Bjoern O. Forsberg Pranav Shah Alister Burt","title":"Developers"},{"location":"about/#primary-citation","text":"If you find OccuPy useful for any purpose, plaese refer to it and formally cite it: TBD","title":"Primary citation"},{"location":"about/#acknowledgements","text":"OccuPy is deployed to PyPi using github and github workflows . The sigmoid function originates from Prof. Werner Antweiler . The documentation format is readthedocs , using MkDocs-material , based on a configuration by Talley Lambert. OccuPy is built purely in python. At it's core, it uses numpy , scipy and matplotlib . Additional features utilize scikit-image . I/O is handled by mrcfile , and the command-line interface uses typer . The GUI was built in PyQt5, using Qt5 designer.","title":"Acknowledgements"},{"location":"install/","text":"Installation Compiled binaries Pre-compiled binaries are not up-to-date during alpha/beta-testing When software is recently released, it is expected that users report bugs and that these get mended over time. This is called (early) alpha-tesing and (later) beta-testing. OccuPy is in alpha. Compiled binaries will not be updated as new bugfixes get implemented. Once alpha/beta testing is over, new binaries will be provided. Using pip install, you can get bugfixes at any time, and update according to the latest changes. If you don't want to wait for a new release of bug-fixes, install with pip from source, as described below). The GUI will be distributed as precompiled binaries that you can download and use. You just need to download and double-click the executable, and the OccuPy GUI should appear. Depending on your operating system, you might need to \"enable\" it by adding permissions and assuring that it isn't a virus. Detailed instructions for this can be found in the troubleshooting section . Occupy GUI version 0.1.7 (alpha). Mac OccuPy GUI Windows OccuPy GUI Linux OccuPy GUI If you have issues using the pre-compiled binaries, please check the troubleshooting section . Previous versions of OccuPy are not available as binaries, but only though PIP and github . The same goes for the command-line tool. Installation through PIP is described below. Using PIP Regardless if you are using conda or not, OccuPy can be installed from the Python Package Index (PyPI) using pip . Stop. Get help. If you run into issues, check the troubleshooting section . Verify/install python and/or pip Windows Linux (ubuntu) The following contains elements of this guide to installing python on windows, and this guide to install pip using python. In the start-menu, type \"Powershell\". Open a powershell, which is a text-based interface to run system commands. Check if python is installed by running the command python --version in the powershell. If you see a version number, python is installed. If not, download and click the python3.10 installer for windows, which you can get thorugh this link . Follow the instructions on screen to install. Close the powershell and reopen it once python is installed. Check if pip is installed by calling py -m pip --version in the powershell. If you see a version number, pip is installed, you can go to the next section to install OccuPy. If not, continue with step 5. Download the file get-pip.py from pypa.io by saving it in the \"Downloads\" folder. In the powershell, run the command \"cd ~/Downloads\". If you now run ls *.py you should see the file \"get-pip.py\" you just downloaded. In the same powershell, run the downloaded file by running the command py get-pip.py and hit enter. This will install pip. You may need to add pip to your environment variables , as described in the later section of this guide . Please follow this guide , which also explains and verifies that pip is installed along with python. Install OccuPy Windows Linux (ubuntu) If you do not have on open, start a powershell as in step 1 of the previous section. In the powershell, run py -m pip install occupy . Verify the install, run py -m pip show occupy . You will either see WARNING: Package(s) not found: occupy or a description of the installation. If successfully installed, continue. In the powershell, call occupy_gui . The occupy GUI should start. If instead you get an error starting with occupy_gui : The term 'occupy_gui' is not recognized... then you need to add the pip package path to your environment variables. To do so, run Get-ChildItem -Recurse -ErrorAction SilentlyContinue -Filter occupy_gui.exe -Force in the powershell. This will find the Directory where occupy was installed. Copy it. Add the location you copied to the \"Path\" as described in the section \"Adding PIP To Windows Environment Variables\" of this guide . Note also that calling occupy in the powershell will invoke the non-GUI tool. Call occupy --help for a list of input options. Open a terminal. In the terminal, call pip install occupy . Verify the install by calling pip show occupy . You will either see WARNING: Package(s) not found: occupy or a description of the installation. If successfully installed, continue. In the terminal, call occupy_gui . If you get the error command not found: occupy_gui then you need to add the pip path to your environment variables, or restart the terminal. Otherwise, the occupy GUI should start. Note also that calling occupy in the terminal will invoke the non-GUI tool. Call occupy --help for a list of input options. Update, or downgrade easily You can also easily install previous versions using pip: pip install occupy == 0 .1.6 Make it easy to run without a terminal Windows Linux (ubuntu) In the start menu, type occupy_gui . You should find occupy_gui as the type \"Run command\" suggested. If this is not convenient enough: Right-click the occupy_gui run command and choose \"open location\". Right-click occupy_gui.exe and click \"create shortcut\". Move the shortcut to e.g. the desktop. To create a launcher that makes it easy to start occupy, do the following. This is derived from this guide Open a new text file and give it the following content: [Desktop Entry] Type=Application Terminal=false Exec=/path/to/executable Name=OccuPy Replace the Exec value with the path to occupy. To find it, open a terminal and call which occupy_gui . Save the file as occupy.desktop in /usr/share/applications/ . This may require root access. Install from source If you are a developer or prefer to download the source code for some other reason, you can also install from the cloned repo git clone https://github.com/bforsbe/OccuPy.git cd occupy pip install -e . We recommend you do this in a virtual environment. More on this and specific dev use in the final section on this page. Usage The GUI Occupy has a GUI that is recommended to use, because it makes the processing steps more intuitive, presents the options plainly, and offer easy ways to check your input and processing results for consistency. To start the GUI from the command-line (terminal) and it is in your path (e.g. if you used pip install), simply call $ occupy_gui If it is not in your path, simply specify its location, or add it to your path. If you downloaded a binary, simply double-click it. The command-line tool OccuPy is also a command-line tool, so that you can easily script its use if needed for bulk processing. This is only available by installing using PIP, or from sourc code. We recommend getting acquainted with OccuPy through the GUI, which also has an option to print the command it will run, which can then be called on the command-line. $ occupy --version OccuPy: 0 .1.5rc4.dev1+gfa0f2e9.d20220905 Developer use Dev tools These are instructions to install the developer tools used to build documentation, build binaries, etc. This is not needed to use occupy. clone the repo git clone https://github.com/bforsbe/OccuPy.git make a clean virtual environment mkdir occupy/occupy_venv python3 -m venv ocucpy/occupy_venv source ocucpy/occupy_venv/bin/activate pip install occupy, deps and dev-deps in the virtual environment pip install -e occupy/ \".[dev]\" build binary cd occupy pyinstaller --onefile --windowed occupy_lib/occupy_gui.py ls dist build docs and start a local serve to view them (interactive with changes) mkdocs serve The python module For development use, you can also import it as a python module, but this currently and unsupported feature that we will not prioritize as main functionality. In [ 1 ]: import occupy_lib In [ 2 ]: from occupy_lib.map_tools import create_radial_mask In [ 3 ]: create_radial_mask ? Signature : create_radial_mask ( size : int , dim : int , center : int = None , radius : float = None , ) Docstring : Create a circular or spherical dimensional mask or kernel : param size : Output array length : param dim : Output array dimension : param center : Center of the radial region : param radius : Radius of the radial region : return : Boolean array File : ~/ Documents / Occ / occupy / occupy_lib / map_tools . py Type : function","title":"Install"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#compiled-binaries","text":"Pre-compiled binaries are not up-to-date during alpha/beta-testing When software is recently released, it is expected that users report bugs and that these get mended over time. This is called (early) alpha-tesing and (later) beta-testing. OccuPy is in alpha. Compiled binaries will not be updated as new bugfixes get implemented. Once alpha/beta testing is over, new binaries will be provided. Using pip install, you can get bugfixes at any time, and update according to the latest changes. If you don't want to wait for a new release of bug-fixes, install with pip from source, as described below). The GUI will be distributed as precompiled binaries that you can download and use. You just need to download and double-click the executable, and the OccuPy GUI should appear. Depending on your operating system, you might need to \"enable\" it by adding permissions and assuring that it isn't a virus. Detailed instructions for this can be found in the troubleshooting section . Occupy GUI version 0.1.7 (alpha). Mac OccuPy GUI Windows OccuPy GUI Linux OccuPy GUI If you have issues using the pre-compiled binaries, please check the troubleshooting section . Previous versions of OccuPy are not available as binaries, but only though PIP and github . The same goes for the command-line tool. Installation through PIP is described below.","title":"Compiled binaries"},{"location":"install/#using-pip","text":"Regardless if you are using conda or not, OccuPy can be installed from the Python Package Index (PyPI) using pip . Stop. Get help. If you run into issues, check the troubleshooting section .","title":"Using PIP"},{"location":"install/#verifyinstall-python-andor-pip","text":"Windows Linux (ubuntu) The following contains elements of this guide to installing python on windows, and this guide to install pip using python. In the start-menu, type \"Powershell\". Open a powershell, which is a text-based interface to run system commands. Check if python is installed by running the command python --version in the powershell. If you see a version number, python is installed. If not, download and click the python3.10 installer for windows, which you can get thorugh this link . Follow the instructions on screen to install. Close the powershell and reopen it once python is installed. Check if pip is installed by calling py -m pip --version in the powershell. If you see a version number, pip is installed, you can go to the next section to install OccuPy. If not, continue with step 5. Download the file get-pip.py from pypa.io by saving it in the \"Downloads\" folder. In the powershell, run the command \"cd ~/Downloads\". If you now run ls *.py you should see the file \"get-pip.py\" you just downloaded. In the same powershell, run the downloaded file by running the command py get-pip.py and hit enter. This will install pip. You may need to add pip to your environment variables , as described in the later section of this guide . Please follow this guide , which also explains and verifies that pip is installed along with python.","title":"Verify/install python and/or pip"},{"location":"install/#install-occupy","text":"Windows Linux (ubuntu) If you do not have on open, start a powershell as in step 1 of the previous section. In the powershell, run py -m pip install occupy . Verify the install, run py -m pip show occupy . You will either see WARNING: Package(s) not found: occupy or a description of the installation. If successfully installed, continue. In the powershell, call occupy_gui . The occupy GUI should start. If instead you get an error starting with occupy_gui : The term 'occupy_gui' is not recognized... then you need to add the pip package path to your environment variables. To do so, run Get-ChildItem -Recurse -ErrorAction SilentlyContinue -Filter occupy_gui.exe -Force in the powershell. This will find the Directory where occupy was installed. Copy it. Add the location you copied to the \"Path\" as described in the section \"Adding PIP To Windows Environment Variables\" of this guide . Note also that calling occupy in the powershell will invoke the non-GUI tool. Call occupy --help for a list of input options. Open a terminal. In the terminal, call pip install occupy . Verify the install by calling pip show occupy . You will either see WARNING: Package(s) not found: occupy or a description of the installation. If successfully installed, continue. In the terminal, call occupy_gui . If you get the error command not found: occupy_gui then you need to add the pip path to your environment variables, or restart the terminal. Otherwise, the occupy GUI should start. Note also that calling occupy in the terminal will invoke the non-GUI tool. Call occupy --help for a list of input options. Update, or downgrade easily You can also easily install previous versions using pip: pip install occupy == 0 .1.6","title":"Install OccuPy"},{"location":"install/#make-it-easy-to-run-without-a-terminal","text":"Windows Linux (ubuntu) In the start menu, type occupy_gui . You should find occupy_gui as the type \"Run command\" suggested. If this is not convenient enough: Right-click the occupy_gui run command and choose \"open location\". Right-click occupy_gui.exe and click \"create shortcut\". Move the shortcut to e.g. the desktop. To create a launcher that makes it easy to start occupy, do the following. This is derived from this guide Open a new text file and give it the following content: [Desktop Entry] Type=Application Terminal=false Exec=/path/to/executable Name=OccuPy Replace the Exec value with the path to occupy. To find it, open a terminal and call which occupy_gui . Save the file as occupy.desktop in /usr/share/applications/ . This may require root access.","title":"Make it easy to run without a terminal"},{"location":"install/#install-from-source","text":"If you are a developer or prefer to download the source code for some other reason, you can also install from the cloned repo git clone https://github.com/bforsbe/OccuPy.git cd occupy pip install -e . We recommend you do this in a virtual environment. More on this and specific dev use in the final section on this page.","title":"Install from source"},{"location":"install/#usage","text":"","title":"Usage"},{"location":"install/#the-gui","text":"Occupy has a GUI that is recommended to use, because it makes the processing steps more intuitive, presents the options plainly, and offer easy ways to check your input and processing results for consistency. To start the GUI from the command-line (terminal) and it is in your path (e.g. if you used pip install), simply call $ occupy_gui If it is not in your path, simply specify its location, or add it to your path. If you downloaded a binary, simply double-click it.","title":"The GUI"},{"location":"install/#the-command-line-tool","text":"OccuPy is also a command-line tool, so that you can easily script its use if needed for bulk processing. This is only available by installing using PIP, or from sourc code. We recommend getting acquainted with OccuPy through the GUI, which also has an option to print the command it will run, which can then be called on the command-line. $ occupy --version OccuPy: 0 .1.5rc4.dev1+gfa0f2e9.d20220905","title":"The command-line tool"},{"location":"install/#developer-use","text":"","title":"Developer use"},{"location":"install/#dev-tools","text":"These are instructions to install the developer tools used to build documentation, build binaries, etc. This is not needed to use occupy. clone the repo git clone https://github.com/bforsbe/OccuPy.git make a clean virtual environment mkdir occupy/occupy_venv python3 -m venv ocucpy/occupy_venv source ocucpy/occupy_venv/bin/activate pip install occupy, deps and dev-deps in the virtual environment pip install -e occupy/ \".[dev]\" build binary cd occupy pyinstaller --onefile --windowed occupy_lib/occupy_gui.py ls dist build docs and start a local serve to view them (interactive with changes) mkdocs serve","title":"Dev tools"},{"location":"install/#the-python-module","text":"For development use, you can also import it as a python module, but this currently and unsupported feature that we will not prioritize as main functionality. In [ 1 ]: import occupy_lib In [ 2 ]: from occupy_lib.map_tools import create_radial_mask In [ 3 ]: create_radial_mask ? Signature : create_radial_mask ( size : int , dim : int , center : int = None , radius : float = None , ) Docstring : Create a circular or spherical dimensional mask or kernel : param size : Output array length : param dim : Output array dimension : param center : Center of the radial region : param radius : Radius of the radial region : return : Boolean array File : ~/ Documents / Occ / occupy / occupy_lib / map_tools . py Type : function","title":"The python module"},{"location":"Troubleshooting/chimX_trbl/","text":"ChimeraX ChimeraX was not found If the \"Launch ChimeraX\" button indicates \"(not found)\", then OccuPy has not found chimeraX. OccuPy looks for chimeraX every time it starts, by looking for a program that can be run by executing chimerax in a terminal. It also looks for some alternate spellings. If you have ChimeraX in your path, it should be found. If not, you have to add the chimeraX program-file to the path. On Windows On Linux (ubuntu) Find the directory where the chimeraX program-file has been installed on your system. One way is to check the properties of your chimeraX-shortcut. Edit the system environment variable \"Path\" by adding the directory from step one, e.g. C:\\Program Files\\ChimeraX\\bin Restart OccuPy to see if chimeraX was detected. Find the directory where chimerax is installed on your system. One way is to start chimeraX and open a terminal. in the terminal, type and execute $ ps aux | grep chimerax bjornf 248767 13.9 1.2 4027076 206084 ? Sl 16:30 0:04 /usr/bin/chimerax -- ... Which indicates that /usr/bin/chimerax is the location of the chimerax program file. To add an environment variable permanently, open the startup list of environment variables. On Ubuntu this is likely /etc/environment. You will need root access for this. Add a new line: OCCUPY_CHIMERAX = <path from step 1>/chimerax Save the file. Restart OccuPy to see if chimeraX was detected. There's a big \"X\" covering the map This could be bad This is an explicit warning. OccuPy estimates a solvent model, but also recognizes when this solvent model is a poor fit. In that case, OccuPy makes sure that you notice. This warning is ok to ignore if... If you are just estimating relative resolution , then the solvent model and confidence are not used. You can then safely ignore the warning and hide it from view in the chimeraX model list. If you are estimating occupancies without modification , then the solvent model and confidence are not used. You can then safely ignore the warning and hide it from view in the chimeraX model list. You need to fix the situation if... If you intend to modify the map based on the estimated occupancy, or use the confidence map for anything, this warning is very serious. A bad solvent model leads to low confidence. OccuPy does not permit modification with low confidence over solvent, because it aims to avoid amplifying \"false\" things within solvent. Please consult the tutorial on map modification to fix the situation.","title":"ChimeraX"},{"location":"Troubleshooting/chimX_trbl/#chimerax","text":"","title":"ChimeraX"},{"location":"Troubleshooting/chimX_trbl/#chimerax-was-not-found","text":"If the \"Launch ChimeraX\" button indicates \"(not found)\", then OccuPy has not found chimeraX. OccuPy looks for chimeraX every time it starts, by looking for a program that can be run by executing chimerax in a terminal. It also looks for some alternate spellings. If you have ChimeraX in your path, it should be found. If not, you have to add the chimeraX program-file to the path. On Windows On Linux (ubuntu) Find the directory where the chimeraX program-file has been installed on your system. One way is to check the properties of your chimeraX-shortcut. Edit the system environment variable \"Path\" by adding the directory from step one, e.g. C:\\Program Files\\ChimeraX\\bin Restart OccuPy to see if chimeraX was detected. Find the directory where chimerax is installed on your system. One way is to start chimeraX and open a terminal. in the terminal, type and execute $ ps aux | grep chimerax bjornf 248767 13.9 1.2 4027076 206084 ? Sl 16:30 0:04 /usr/bin/chimerax -- ... Which indicates that /usr/bin/chimerax is the location of the chimerax program file. To add an environment variable permanently, open the startup list of environment variables. On Ubuntu this is likely /etc/environment. You will need root access for this. Add a new line: OCCUPY_CHIMERAX = <path from step 1>/chimerax Save the file. Restart OccuPy to see if chimeraX was detected.","title":"ChimeraX was not found"},{"location":"Troubleshooting/chimX_trbl/#theres-a-big-x-covering-the-map","text":"This could be bad This is an explicit warning. OccuPy estimates a solvent model, but also recognizes when this solvent model is a poor fit. In that case, OccuPy makes sure that you notice.","title":"There's a big \"X\" covering the map"},{"location":"Troubleshooting/chimX_trbl/#this-warning-is-ok-to-ignore-if","text":"If you are just estimating relative resolution , then the solvent model and confidence are not used. You can then safely ignore the warning and hide it from view in the chimeraX model list. If you are estimating occupancies without modification , then the solvent model and confidence are not used. You can then safely ignore the warning and hide it from view in the chimeraX model list.","title":"This warning is ok to ignore if..."},{"location":"Troubleshooting/chimX_trbl/#you-need-to-fix-the-situation-if","text":"If you intend to modify the map based on the estimated occupancy, or use the confidence map for anything, this warning is very serious. A bad solvent model leads to low confidence. OccuPy does not permit modification with low confidence over solvent, because it aims to avoid amplifying \"false\" things within solvent. Please consult the tutorial on map modification to fix the situation.","title":"You need to fix the situation if..."},{"location":"Troubleshooting/install_trbl/","text":"Installation The precompiled binary isn't working On Windows On Mac On Linux (ubuntu) Note that it can take ~1 min for it to start. The OccuPy GUI may be recognized as coming from an untrusted or \"unidentified developer\", and produce a warning message the first time you run the program. You may need to choose to \"keep\", \"trust\" or otherwise confirm that it is ok to run it. If the above doesn\u2019t work, and the binary is recognized as a vrius or security threat, you can either make an exception for it in your virus software or contact one of the OccuPy developers to resolve the issue. If the program appears unresponsive, you can try to run it from a terminal. Use the file browser to find occupy_gui.exe (probably in the Downloads folder), then start a terminal as described here . In the terminal, type ./occupy_gui.exe . The program should start, or at least provide some information about what isn't working. If you still have not been able to resolve the issue, please look through existing issues , and submit a new issue/question if you still can't make it work. Note that it can take ~1 min for it to start. The OccuPy GUI may be recognized as coming from an untrusted or \"unidentified developer\", and produce a warning message the first time you run the program. This requires administrator privileges. If doulbe-clicking the binary does not open the GUI, right-click on the OccuPy GUI binary file and select \"Open\", and then click the \"Open\" button in the window that appears. If it opens as a text file, you will need to mark the file as an executable. Unfortunately, you need to do this in a terminal as described here . The file icon should now appear to be a small terminal window. Double-clicking the file should open the OccuPy GUI. If the above doesn\u2019t work, you can run the binary from the terminal, which may provide some more info. Open a terminal in the folder where the OccuPy GUI binary is located, and run it by typing ./occupy_gui If you still have not been able to resolve the issue, please look through existing issues , and submit a new issue/question if you still can't make it work. Note that it can take ~1 min for it to start. If you get a messsage saying \"Could not display occupy_gui, thereis no application installed for executable files\", then you may need to alter the \"permissions\". Click \"OK\", then right-click the binary and select \"Properties\". Under \"Permissions\", make sure \"Allow to execute file as program\" is checked. Alternatively, you can use a terminal to change the permisssions by typing chmod a+x occupy_gui . If the above doesn\u2019t work, you can run the binary from the command line, which may provide some more info. Open a terminal in the folder where the OccuPy GUI binary is located, and run it by typing ./occupy_gui If you still have not been able to resolve the issue, please look through existing issues , and submit a new issue/question if you still can't make it work. The GUI windows looks too big/small/... On some (e.g. 4K) screens, the high resolution causes graphical elements to be re-scaled. OccuPy knows about this and does its best to get it right, but we have not been able to test on a wide range of screen sizes and resolutions. Report any issues If your GUI does not look like the image in the \"GUI overview\" tutorial, please report this to the developers so that we can make sure that it doesn't happen in the future. I'd like to install with pip but I don't know how To help us make the installation instructions better and help you use python and pip, you can request help here . Please try to complete the installation by the instructions provided in the install section first, and see if the below can resolve any issues. I installed through pip but OccuPy isn't found Let's first confirm that it was in fact installed. On Windows On Mac On Linux (ubuntu) In the main menu search bar, type \"powershell\", and open a text-based interface to your system. Type py -m pip show occupy and hit enter. If you see details regarding occupy, then we're good. If not, try writing out \"python\" instan of just \"py\": python -m pip show occupy . If you still don't see details like version and location, then occupy probably wasn't installed properly. You need to try to install it according to the install procedures, and ask for help if you still can't make it work. Open a terminal and type pip show occupy , and hit enter. If you don't see details like version and location, then occupy probably wasn't installed properly. If you used a virtual environment when installing, make sure to activate it like you did before, and try again. Open a terminal and type pip show occupy , and hit enter. If you don't see details like version and location, then occupy probably wasn't installed properly. If you used a virtual environment when installing, make sure to activate it like you did before, and try again. If OccuPy you managed to confirm that OccuPy was installed, Pip may have installed OccuPy in a location that is not universally known to your system. You can either tell your system where to look when searching for installed applications, or create a shortcut to it that you can find easily. In either case, we need to find where occupy was installed. On Windows On Mac On Linux (ubuntu) In a powershell like you just used to verify the install, type Get-ChildItem $($ENV:userprofile) -force -Recurse -ErrorAction SilentlyContinue occupy_gui.exe Note the reported directory. Open a file browser and enable hidden files under \"view\". Browse to the directory where occupy_gui.exe was found. Option 1: Create a shortcut. Right-click occupy_gui.exe and click \"create shortcut\". Move the new shortcut to e.g. the desktop. Option 2: Make sure the occupy directory is included in the paths where the system looks for programs. Edit the system and/or user environment variable \"Path\" by adding the directory from step 2, e.g. C:\\Users\\IEUser\\AppData\\Local\\Programs\\Python\\Python310\\Scripts In a terminal where pip is avaialble, call pip show occupy . The reported location is a good indication of where occupy was installed. If the locaton is /home/bjornf/.local/lib/python3.8/site-packages , then the location of the program is likely /home/bjornf/.local/bin To add the path of the program permanently, open the startup list of environment variables. On Ubuntu this is likely /etc/environment. You will need root access for this. The PATH variable is a colon-separated list. Add the occupy_gui path as new entry in this list. If you do mot have the access rights to to this system-wide, you can add the following to your session startup file: export PATH=$PATH:</path/to/occupy/program> In a terminal where pip is avaialble, call pip show occupy . The reported location is a good indication of where occupy was installed. If the locaton is /home/bjornf/.local/lib/python3.8/site-packages , then the location of the program is likely /home/bjornf/.local/bin To add the path of the program permanently, open the startup list of environment variables. On Ubuntu this is likely /etc/environment. You will need root access for this. The PATH variable is a colon-separated list. Add the occupy_gui path as new entry in this list. If you do mot have the access rights to to this system-wide, you can add the following to your session startup file: export PATH=$PATH:</path/to/occupy/program>","title":"Install troubles"},{"location":"Troubleshooting/install_trbl/#installation","text":"","title":"Installation"},{"location":"Troubleshooting/install_trbl/#the-precompiled-binary-isnt-working","text":"On Windows On Mac On Linux (ubuntu) Note that it can take ~1 min for it to start. The OccuPy GUI may be recognized as coming from an untrusted or \"unidentified developer\", and produce a warning message the first time you run the program. You may need to choose to \"keep\", \"trust\" or otherwise confirm that it is ok to run it. If the above doesn\u2019t work, and the binary is recognized as a vrius or security threat, you can either make an exception for it in your virus software or contact one of the OccuPy developers to resolve the issue. If the program appears unresponsive, you can try to run it from a terminal. Use the file browser to find occupy_gui.exe (probably in the Downloads folder), then start a terminal as described here . In the terminal, type ./occupy_gui.exe . The program should start, or at least provide some information about what isn't working. If you still have not been able to resolve the issue, please look through existing issues , and submit a new issue/question if you still can't make it work. Note that it can take ~1 min for it to start. The OccuPy GUI may be recognized as coming from an untrusted or \"unidentified developer\", and produce a warning message the first time you run the program. This requires administrator privileges. If doulbe-clicking the binary does not open the GUI, right-click on the OccuPy GUI binary file and select \"Open\", and then click the \"Open\" button in the window that appears. If it opens as a text file, you will need to mark the file as an executable. Unfortunately, you need to do this in a terminal as described here . The file icon should now appear to be a small terminal window. Double-clicking the file should open the OccuPy GUI. If the above doesn\u2019t work, you can run the binary from the terminal, which may provide some more info. Open a terminal in the folder where the OccuPy GUI binary is located, and run it by typing ./occupy_gui If you still have not been able to resolve the issue, please look through existing issues , and submit a new issue/question if you still can't make it work. Note that it can take ~1 min for it to start. If you get a messsage saying \"Could not display occupy_gui, thereis no application installed for executable files\", then you may need to alter the \"permissions\". Click \"OK\", then right-click the binary and select \"Properties\". Under \"Permissions\", make sure \"Allow to execute file as program\" is checked. Alternatively, you can use a terminal to change the permisssions by typing chmod a+x occupy_gui . If the above doesn\u2019t work, you can run the binary from the command line, which may provide some more info. Open a terminal in the folder where the OccuPy GUI binary is located, and run it by typing ./occupy_gui If you still have not been able to resolve the issue, please look through existing issues , and submit a new issue/question if you still can't make it work.","title":"The precompiled binary isn't working"},{"location":"Troubleshooting/install_trbl/#the-gui-windows-looks-too-bigsmall","text":"On some (e.g. 4K) screens, the high resolution causes graphical elements to be re-scaled. OccuPy knows about this and does its best to get it right, but we have not been able to test on a wide range of screen sizes and resolutions. Report any issues If your GUI does not look like the image in the \"GUI overview\" tutorial, please report this to the developers so that we can make sure that it doesn't happen in the future.","title":"The GUI windows looks too big/small/..."},{"location":"Troubleshooting/install_trbl/#id-like-to-install-with-pip-but-i-dont-know-how","text":"To help us make the installation instructions better and help you use python and pip, you can request help here . Please try to complete the installation by the instructions provided in the install section first, and see if the below can resolve any issues.","title":"I'd like to install with pip but I don't know how"},{"location":"Troubleshooting/install_trbl/#i-installed-through-pip-but-occupy-isnt-found","text":"Let's first confirm that it was in fact installed. On Windows On Mac On Linux (ubuntu) In the main menu search bar, type \"powershell\", and open a text-based interface to your system. Type py -m pip show occupy and hit enter. If you see details regarding occupy, then we're good. If not, try writing out \"python\" instan of just \"py\": python -m pip show occupy . If you still don't see details like version and location, then occupy probably wasn't installed properly. You need to try to install it according to the install procedures, and ask for help if you still can't make it work. Open a terminal and type pip show occupy , and hit enter. If you don't see details like version and location, then occupy probably wasn't installed properly. If you used a virtual environment when installing, make sure to activate it like you did before, and try again. Open a terminal and type pip show occupy , and hit enter. If you don't see details like version and location, then occupy probably wasn't installed properly. If you used a virtual environment when installing, make sure to activate it like you did before, and try again. If OccuPy you managed to confirm that OccuPy was installed, Pip may have installed OccuPy in a location that is not universally known to your system. You can either tell your system where to look when searching for installed applications, or create a shortcut to it that you can find easily. In either case, we need to find where occupy was installed. On Windows On Mac On Linux (ubuntu) In a powershell like you just used to verify the install, type Get-ChildItem $($ENV:userprofile) -force -Recurse -ErrorAction SilentlyContinue occupy_gui.exe Note the reported directory. Open a file browser and enable hidden files under \"view\". Browse to the directory where occupy_gui.exe was found. Option 1: Create a shortcut. Right-click occupy_gui.exe and click \"create shortcut\". Move the new shortcut to e.g. the desktop. Option 2: Make sure the occupy directory is included in the paths where the system looks for programs. Edit the system and/or user environment variable \"Path\" by adding the directory from step 2, e.g. C:\\Users\\IEUser\\AppData\\Local\\Programs\\Python\\Python310\\Scripts In a terminal where pip is avaialble, call pip show occupy . The reported location is a good indication of where occupy was installed. If the locaton is /home/bjornf/.local/lib/python3.8/site-packages , then the location of the program is likely /home/bjornf/.local/bin To add the path of the program permanently, open the startup list of environment variables. On Ubuntu this is likely /etc/environment. You will need root access for this. The PATH variable is a colon-separated list. Add the occupy_gui path as new entry in this list. If you do mot have the access rights to to this system-wide, you can add the following to your session startup file: export PATH=$PATH:</path/to/occupy/program> In a terminal where pip is avaialble, call pip show occupy . The reported location is a good indication of where occupy was installed. If the locaton is /home/bjornf/.local/lib/python3.8/site-packages , then the location of the program is likely /home/bjornf/.local/bin To add the path of the program permanently, open the startup list of environment variables. On Ubuntu this is likely /etc/environment. You will need root access for this. The PATH variable is a colon-separated list. Add the occupy_gui path as new entry in this list. If you do mot have the access rights to to this system-wide, you can add the following to your session startup file: export PATH=$PATH:</path/to/occupy/program>","title":"I installed through pip but OccuPy isn't found"},{"location":"Troubleshooting/other_trbl/","text":"Other This section contains help on common concerns and questions. Further help and insight is offered through the issue tracker. Command-line help For brief information regarding input options on the command line, please use $ occupy --help For extensive information regarding input options, see the GUI overview tutorial. The modified map is similar to the input map The modification is effected by the power you choose, where values larger than 1 mean to modify. Larger values mean to modify more, and typically values between 2 and 10 are useful. Try increasing it. Check your solvent model (tab next to output log). The modification is suppressed if the estimated solvent model is very wide, which decreases confidence in partial occupancies. If there isn't enough solvent for the fitting of the solvent model, it will typically be too wide and prevent modification of lower-scale components. You can check this by using the --plot option and inspecting the output. You can also use --solvent-def <mask.mrc> where the mask is a conventional solvent-mask. This will allow these regions to be omitted during solvent fitting. This mask does not need to be perfect, and does not limit the modification to areas inside it . The estimated scale is just 1 everywhere Well you might have a rock of a complex. If you set the value of --tau/-t manually low, then this is the reason. If it got auto-calculated low, you can increase it, but this is a bad idea. It is rather better to increase the --kernel so that the value of tau is automatically increased. You may also waent to increase --lowpass/-lp ot increase the number of sampled pixel nv . You can see what paramters were calculated and used by checking the output log file or using the --verbose option. Increasing the kernel size and/or lowpass setting permits more confident sampling of the local scale, but does increase the granularity. Usually a kernel size of 5 or 7 is adequate, with nv-values in the range 30-100. Low-pass defaults to 8 or 3*pixel-size, which ever is larger, but depending on resolution and pixel-size this may be adjusted depending on the sought granularity. OccuPy puts everything on a scale based on what it estimates as \"full\" through a non-exhaustive search. It is non-exhaustive because it's much faster. If the \"full\" scale is under-estimated, lots of regions will be \"over-full\", i.e. over-estimated as full. YOu can reduce the --tile-size from its default value 12 to reduce the area of what defines \"full\" scale, which will narrow the definition and in general increase the value of full occupancy, thus stretching the range of the estimated scale. For high-resolution maps, a very small tile-size makes the local scale approximate the mass of individual atoms. There is a sphere of noise surrounding the amplified map If the confidence is over-estimated, low-scale components will be permitted to be amplified. You can hedge the confidence by using --hedge-confidence <val> , where <val> is a power, meaning that higher values hedge more. 10 is a reasonable value to try. Another possible reason for the confidence being over-estimated is that the solvent model mean and/or variance is under-estimated. A typical reason for this is that the solvent has been flattened, such that the solvent is not gaussian. OccuPy was not designed for this type of reconstruction, since such flattening is typically enforced using a mask which has thus already delineated solvent vs non-solvent. If the map is not solvent-flattened, and confidence-hedging does not alleviate solvent-amplification surrounding the main map component, use --solvent-def <mask.mrc> where the mask is a conventional solvent-mask. This will allow these regions to be omitted during solvent fitting. This mask does not need to be perfect, and does not limit the modification to areas inside it . The estimated scale looks like my local resolution OccuPy estimates the scale. The scale decreases due to both lower resolution and lower occupancy. Since it is not possible to trivially separate these factors, the current approach to estimate occupancy as separate from lower resolution is to low-pass filter the input before estimating the local scale. This is turned on by default when amplifying or attenuating the map, to minimize over-amplification of low-scale components that are simply low resolution. If one is just estimating scale but wants to reduce resolution-dependent effects, the low-pass filtration before scale-estimation can be activated by either --lp-scale or --occupancy. It should then be combined with --lowpass/-lp or --resolution/-r to specify the worst resolution among the components for which occupancy is to be estimated. For membrane proteins, see here . In the absence of variable occupancy, local scale does actually approximate the local resolution. If you would like to include resolution-dependent factors during amplification or attenuation (which is not recommended), you can do so by using --raw_scale, which does the opposite of --lp-scale. My membrane or detergent looks funny Membranes are lower in resolution due to their amorphous nature which cannot be coherently averaged. Because this reduces the local scale, membranes are estimated at low scale. The estimated scale of membranes are thus not a measure of relative density or occupancy. The low-pass filtration intended to reduce influence of resolution-dependent scale factors is only an approximate measure, so that the precise meaning of the local scale of membrane and another amorphous regions (as estimated by OccuPy ) is not well-defined. The lower scale generally reflects intuition however, and permits weak attenuation to de-emphasize these regions to make visualization easier.","title":"Other"},{"location":"Troubleshooting/other_trbl/#other","text":"This section contains help on common concerns and questions. Further help and insight is offered through the issue tracker.","title":"Other"},{"location":"Troubleshooting/other_trbl/#command-line-help","text":"For brief information regarding input options on the command line, please use $ occupy --help For extensive information regarding input options, see the GUI overview tutorial.","title":"Command-line help"},{"location":"Troubleshooting/other_trbl/#the-modified-map-is-similar-to-the-input-map","text":"The modification is effected by the power you choose, where values larger than 1 mean to modify. Larger values mean to modify more, and typically values between 2 and 10 are useful. Try increasing it. Check your solvent model (tab next to output log). The modification is suppressed if the estimated solvent model is very wide, which decreases confidence in partial occupancies. If there isn't enough solvent for the fitting of the solvent model, it will typically be too wide and prevent modification of lower-scale components. You can check this by using the --plot option and inspecting the output. You can also use --solvent-def <mask.mrc> where the mask is a conventional solvent-mask. This will allow these regions to be omitted during solvent fitting. This mask does not need to be perfect, and does not limit the modification to areas inside it .","title":"The modified map is similar to the input map"},{"location":"Troubleshooting/other_trbl/#the-estimated-scale-is-just-1-everywhere","text":"Well you might have a rock of a complex. If you set the value of --tau/-t manually low, then this is the reason. If it got auto-calculated low, you can increase it, but this is a bad idea. It is rather better to increase the --kernel so that the value of tau is automatically increased. You may also waent to increase --lowpass/-lp ot increase the number of sampled pixel nv . You can see what paramters were calculated and used by checking the output log file or using the --verbose option. Increasing the kernel size and/or lowpass setting permits more confident sampling of the local scale, but does increase the granularity. Usually a kernel size of 5 or 7 is adequate, with nv-values in the range 30-100. Low-pass defaults to 8 or 3*pixel-size, which ever is larger, but depending on resolution and pixel-size this may be adjusted depending on the sought granularity. OccuPy puts everything on a scale based on what it estimates as \"full\" through a non-exhaustive search. It is non-exhaustive because it's much faster. If the \"full\" scale is under-estimated, lots of regions will be \"over-full\", i.e. over-estimated as full. YOu can reduce the --tile-size from its default value 12 to reduce the area of what defines \"full\" scale, which will narrow the definition and in general increase the value of full occupancy, thus stretching the range of the estimated scale. For high-resolution maps, a very small tile-size makes the local scale approximate the mass of individual atoms.","title":"The estimated scale is just 1 everywhere"},{"location":"Troubleshooting/other_trbl/#there-is-a-sphere-of-noise-surrounding-the-amplified-map","text":"If the confidence is over-estimated, low-scale components will be permitted to be amplified. You can hedge the confidence by using --hedge-confidence <val> , where <val> is a power, meaning that higher values hedge more. 10 is a reasonable value to try. Another possible reason for the confidence being over-estimated is that the solvent model mean and/or variance is under-estimated. A typical reason for this is that the solvent has been flattened, such that the solvent is not gaussian. OccuPy was not designed for this type of reconstruction, since such flattening is typically enforced using a mask which has thus already delineated solvent vs non-solvent. If the map is not solvent-flattened, and confidence-hedging does not alleviate solvent-amplification surrounding the main map component, use --solvent-def <mask.mrc> where the mask is a conventional solvent-mask. This will allow these regions to be omitted during solvent fitting. This mask does not need to be perfect, and does not limit the modification to areas inside it .","title":"There is a sphere of noise surrounding the amplified map"},{"location":"Troubleshooting/other_trbl/#the-estimated-scale-looks-like-my-local-resolution","text":"OccuPy estimates the scale. The scale decreases due to both lower resolution and lower occupancy. Since it is not possible to trivially separate these factors, the current approach to estimate occupancy as separate from lower resolution is to low-pass filter the input before estimating the local scale. This is turned on by default when amplifying or attenuating the map, to minimize over-amplification of low-scale components that are simply low resolution. If one is just estimating scale but wants to reduce resolution-dependent effects, the low-pass filtration before scale-estimation can be activated by either --lp-scale or --occupancy. It should then be combined with --lowpass/-lp or --resolution/-r to specify the worst resolution among the components for which occupancy is to be estimated. For membrane proteins, see here . In the absence of variable occupancy, local scale does actually approximate the local resolution. If you would like to include resolution-dependent factors during amplification or attenuation (which is not recommended), you can do so by using --raw_scale, which does the opposite of --lp-scale.","title":"The estimated scale looks like my local resolution"},{"location":"Troubleshooting/other_trbl/#my-membrane-or-detergent-looks-funny","text":"Membranes are lower in resolution due to their amorphous nature which cannot be coherently averaged. Because this reduces the local scale, membranes are estimated at low scale. The estimated scale of membranes are thus not a measure of relative density or occupancy. The low-pass filtration intended to reduce influence of resolution-dependent scale factors is only an approximate measure, so that the precise meaning of the local scale of membrane and another amorphous regions (as estimated by OccuPy ) is not well-defined. The lower scale generally reflects intuition however, and permits weak attenuation to de-emphasize these regions to make visualization easier.","title":"My membrane or detergent looks funny"},{"location":"Tutorials/gui/","text":"GUI overview The GUI of OccuPy allows you to open maps and view them as sliced 2D images. OccuPy is not meant to visualize the map in any great detail, this is for you to make appropriate consistency checks. For fine analysis, the GUI will call out to open ChimeraX, a much more sophisticated visualization tool. The GUI automatically calculates and adjusts kernel settings per the users direction, and permits interactive evaluation of map modification. The GUI also exposes tools to generate maks based on the estimated scale. Input map The map to be used as input. When you run OccuPy through the GUI it will the currently selected map. OccuPy supports cubic .map and .mrc files. Occasionally, .ccp4 files cause issues. OccuPy wants raw input OccuPy was designed to expect unsharpened maps with solvent noise, so it's best to not mask or post-process your map. In most cases its fine to do this too, but it's not recommended. AI maps try too hard Machine-learning tools for post-processing alter the map in ways that OccuPy was not designed to anticipate. If you provide a map that has been altered by machine-learning methods, the output should be considered vey unreliable. There is also an \"emdb\" button to fetch and unzip the main map of any EMD entry. Scale Kernel Settings When you provide an input map, OccuPy checks the box dimensions and voxel size. Based on this, it calculates suggested parameters to estimate the local scale with accuracy and confidence. If you change these parameters, parameters below may be updated. Changing some of these parameters will alter the local scale estimate, so leave them unchanged until you have gone through one of the specific tutorials and understand what they do. Details depend on use More detailed specification of the scale kernel settings are described in the tuorials that describe estimation of occupanvy and relative resolution, since they influence each case slightly differently. Modification options In some cases you may want to change the input map based on the scale estimate. This is where you do that. If the scale you have selected (below the viewer) is in \"occupancy\" mode (name has 'occ' in it), OccuPy will let you use it to modify. The active modification will be interactively approximated in the \"preview\" and \"plot\" tab of the viewer. If the scale you have selected (below the viewer) is in \"resolution\" mode (name has 'res' in it), OccuPy will not let you use it to modify, which will inactivate the \"preview\" tab of the viewer and the \"Modify Map\" button. It's easier done than said If you try it out and follow one or more tutorials, this will make more sense than any explanation. More detailed specification of the modification options are e.g. described in the tutorial on map modification. Optional/extra These are options that you would normally not use, but that you might want to play with in certain cases. You can skip this section for now, leaving them at default values. Limit box size OccuPy down-samples the input map to this size for all internal calculations, using a Fourier-crop (low-pass) procedure. This makes OccuPy use less memory and run faster. Any modified output is zero-padded in Fourier space to match the input dimension. Ouput lowpass This is only relevant for modified output. Beyond the limited box-size described above, OccuPy applies any modification on the full-resolution input, not the low-passed input. So if the output should be low-passed, this must be specified. Naive normalization This is an option to ignore the tile size specified in the kernel settings. In this case, the scale estimation becomes very sensitive to the Tau percentile (also a kernel setting), which might be desirable in some very special circumstances. Histogram-match to input Histogram-matching is a procedure to make the greyscale and contrast of two images as equal as possible. In some cases this might be desirable to enforce, but most of the time the greyscale of the output will very closely match the input anyway. The viewer Input The map currently selected in the \"input map\" drop-down menu above. Scale The map currently selected in the \"scale map\" drop-down menu below the viewer. You can either add files to this drop-down by browsing or by running OccuPy. Conf. The estimated solvent confidence from the previous time OccuPy was run. This is based on the estimated solvent model, which can be viewed on the tab adjacent to the output log. The confidence is used to restrict any modification, so that solvent isn't amplified or attenuated. Sol.def The map currently selected in the \"solvent def\" drop-down menu below. The solvent definition restricts the estimation of a solvent model. This is not typically required. Preview If you have an input and occupancy-mode scale selected, this will show a preview of the modification. This does not account for confidence and solvent compensation, and will look worse than the actual output . The output log This will document what is happening, for our convenience. But everything is also documented in the full log, which you can access either through the menu or by double-clicking the output log tab . Some clutter during testing OccuPy is currently being alpha-tested, so there's a bunch of extra output to make it easier to respond to user issues. These lines begin with \"AT: \" and should be colored green. You can safely ignore them. The Menu Control over where OccuPy writes output, and other conventional options.","title":"GUI overview"},{"location":"Tutorials/gui/#gui-overview","text":"The GUI of OccuPy allows you to open maps and view them as sliced 2D images. OccuPy is not meant to visualize the map in any great detail, this is for you to make appropriate consistency checks. For fine analysis, the GUI will call out to open ChimeraX, a much more sophisticated visualization tool. The GUI automatically calculates and adjusts kernel settings per the users direction, and permits interactive evaluation of map modification. The GUI also exposes tools to generate maks based on the estimated scale.","title":"GUI overview"},{"location":"Tutorials/gui/#input-map","text":"The map to be used as input. When you run OccuPy through the GUI it will the currently selected map. OccuPy supports cubic .map and .mrc files. Occasionally, .ccp4 files cause issues. OccuPy wants raw input OccuPy was designed to expect unsharpened maps with solvent noise, so it's best to not mask or post-process your map. In most cases its fine to do this too, but it's not recommended. AI maps try too hard Machine-learning tools for post-processing alter the map in ways that OccuPy was not designed to anticipate. If you provide a map that has been altered by machine-learning methods, the output should be considered vey unreliable. There is also an \"emdb\" button to fetch and unzip the main map of any EMD entry.","title":"Input map"},{"location":"Tutorials/gui/#scale-kernel-settings","text":"When you provide an input map, OccuPy checks the box dimensions and voxel size. Based on this, it calculates suggested parameters to estimate the local scale with accuracy and confidence. If you change these parameters, parameters below may be updated. Changing some of these parameters will alter the local scale estimate, so leave them unchanged until you have gone through one of the specific tutorials and understand what they do. Details depend on use More detailed specification of the scale kernel settings are described in the tuorials that describe estimation of occupanvy and relative resolution, since they influence each case slightly differently.","title":"Scale Kernel Settings"},{"location":"Tutorials/gui/#modification-options","text":"In some cases you may want to change the input map based on the scale estimate. This is where you do that. If the scale you have selected (below the viewer) is in \"occupancy\" mode (name has 'occ' in it), OccuPy will let you use it to modify. The active modification will be interactively approximated in the \"preview\" and \"plot\" tab of the viewer. If the scale you have selected (below the viewer) is in \"resolution\" mode (name has 'res' in it), OccuPy will not let you use it to modify, which will inactivate the \"preview\" tab of the viewer and the \"Modify Map\" button. It's easier done than said If you try it out and follow one or more tutorials, this will make more sense than any explanation. More detailed specification of the modification options are e.g. described in the tutorial on map modification.","title":"Modification options"},{"location":"Tutorials/gui/#optionalextra","text":"These are options that you would normally not use, but that you might want to play with in certain cases. You can skip this section for now, leaving them at default values.","title":"Optional/extra"},{"location":"Tutorials/gui/#limit-box-size","text":"OccuPy down-samples the input map to this size for all internal calculations, using a Fourier-crop (low-pass) procedure. This makes OccuPy use less memory and run faster. Any modified output is zero-padded in Fourier space to match the input dimension.","title":"Limit box size"},{"location":"Tutorials/gui/#ouput-lowpass","text":"This is only relevant for modified output. Beyond the limited box-size described above, OccuPy applies any modification on the full-resolution input, not the low-passed input. So if the output should be low-passed, this must be specified.","title":"Ouput lowpass"},{"location":"Tutorials/gui/#naive-normalization","text":"This is an option to ignore the tile size specified in the kernel settings. In this case, the scale estimation becomes very sensitive to the Tau percentile (also a kernel setting), which might be desirable in some very special circumstances.","title":"Naive normalization"},{"location":"Tutorials/gui/#histogram-match-to-input","text":"Histogram-matching is a procedure to make the greyscale and contrast of two images as equal as possible. In some cases this might be desirable to enforce, but most of the time the greyscale of the output will very closely match the input anyway.","title":"Histogram-match to input"},{"location":"Tutorials/gui/#the-viewer","text":"","title":"The viewer"},{"location":"Tutorials/gui/#input","text":"The map currently selected in the \"input map\" drop-down menu above.","title":"Input"},{"location":"Tutorials/gui/#scale","text":"The map currently selected in the \"scale map\" drop-down menu below the viewer. You can either add files to this drop-down by browsing or by running OccuPy.","title":"Scale"},{"location":"Tutorials/gui/#conf","text":"The estimated solvent confidence from the previous time OccuPy was run. This is based on the estimated solvent model, which can be viewed on the tab adjacent to the output log. The confidence is used to restrict any modification, so that solvent isn't amplified or attenuated.","title":"Conf."},{"location":"Tutorials/gui/#soldef","text":"The map currently selected in the \"solvent def\" drop-down menu below. The solvent definition restricts the estimation of a solvent model. This is not typically required.","title":"Sol.def"},{"location":"Tutorials/gui/#preview","text":"If you have an input and occupancy-mode scale selected, this will show a preview of the modification. This does not account for confidence and solvent compensation, and will look worse than the actual output .","title":"Preview"},{"location":"Tutorials/gui/#the-output-log","text":"This will document what is happening, for our convenience. But everything is also documented in the full log, which you can access either through the menu or by double-clicking the output log tab . Some clutter during testing OccuPy is currently being alpha-tested, so there's a bunch of extra output to make it easier to respond to user issues. These lines begin with \"AT: \" and should be colored green. You can safely ignore them.","title":"The output log"},{"location":"Tutorials/gui/#the-menu","text":"Control over where OccuPy writes output, and other conventional options.","title":"The Menu"},{"location":"Tutorials/intro/","text":"An intro tutorial This is a general tutorial to get acquainted with the GUI and workflow. There's something you should know It will be useful to read the GUI overview first, or refer to it through this tutorial. The devil is in the details There are more instructive tutorials for individual use cases, which also clarify limitations and effects of adjusting input parameters. It is recommended that you do this quick general tutorial first, then the specific ones. 1. Start OccuPy Open OccuPy by double-clicking the distributed binary or calling occupy_gui in a terminal. If you are unsure where the GUI will run and put output files, or want to change this, click \"Session\"->\"Change location\" in the top menu. You will find three (3) large buttons above the ouput log, called \"Estimate Scale\", \"Modify Map\", and \"Launch chimeraX\". These should all be greyed out. Check that the far-right button to start ChimeraX does not indicate \"(not found)\". If ChimeraX was not found, you will not be able to invoke ChimeraX from the OccuPy GUI. Please see the section for troubleshooting chimeraX to remedy this, or use the workaround below. Workaround OccuPy writes a chimeraX command script (.cxc) every time you estimate the scale or modify a map. You can open this through chimeraX instead of using OccuPy to launch chimeraX. Just make sure to use \"File\"->\"close session\" in chimeraX before you open the .cxc-file written by OccuPy. 2. Open a map To open an input file we would normally click \"browse\" in the top-right corner of the OccuPy window. For this tutorial we will use a map from the emdb instead. Click the \"emdb\" button in the top-right corner of the OccuPy window. A small dialog should open asking to specify the unique ID of the map in the electron microscopy database. Enter the number 3061 and click \"Fetch\". This will download, unzip and open a relatively small map of the transmembrane protein gamma-secretase in the current working directory. In the \"Input\" tab of the viewer, the input map can be inspected. Just below the viewer, select the z-dimension and change the slice number to 96 to see the transmembrane helices across the light-grey detergent micelle, as well as the extracellular domain. 3. Notice the kernel settings Based on the input, reasonable kernel settings were derived automatically. In this case, a low-pass of 8\u00c5 will be applied to make solvent estimation easier. a sphere with radius 2.86\u00c5 will be used to estimate the local scale. a cube of 5 pixels (voxels) in each dimension will hold a binary mask with the above radial cutoff. of all the pixels selected by the binary mask, the scale will be proportional to the bottom 96.47% percentile, or the top 3.53% percentile the above parameters results in 93 pixels (voxels) being sampled around each map pixel (voxel). a region of 12 pixels (voxels) in each dimension will be used to determine the scale-normalizing value. This value is always 12 by default, and not estimated. Do not change these settings for this tutorial. 4. Estimate resolution-mode local scale Make sure \"resolution\" is checked under the \"Modification options\". Run OccuPy by clicking the Big button labeled \"Estimate scale\" just above the output log. This should finish in a few seconds. Notice that the run is individually numbered as \"1-1\" in the output log. There's more to this To learn how parameter adjustment can help you get a better estimate, consult the tutorial on relative resolution estimation later. 5. Assess the scale You will find that the estimated scale has been added to the \"scale map\" drop-down and is thus also rendered in the viewer tab \"Scale\". Click this viewer tab and drag the slider to check the estimated scale. To further inspect the local scale, click the big button labeled \"Launch ChimeraX\" to the far right above the output log. This will launch chimeraX and run a command script written by OccuPy the last time you ran anything through the GUI. In this case you should see the input map colored by the estimated scale, along with a color key. Change the color of map #1 to grey. Next, in the chimeraX command-line tool, run the command scale_color #1 #2 . This will re-color map #1 by the estimated scale (map #2), according to the color key. Close chimeraX. 6. Assess the solvent model The solvent model is ony used for modification, but it is nonetheless a good idea to check it. Click the tab \"Solvent model\" next to the \"output log\" tab at the bottom of the OccuPy GUI. The green line is the solvent model fit as a gaussian to the map histogram. It appears parabolic since this is a log-plot. The red line is the confidence of voxel values above solvent. Because we have a solvent model, we also have a confidence map. This has been opened in the viewer tab \"Conf.\". Click this tab and inspect what occupy thinks is solvent. You should find that the detergent is also identified as \"stuff\" (being white), as opposed to solvent (black). 7. Estimate occupancy-mode local scale Click on the \"amplify\" tab of modification options on the left. Enable it and drag the slider. The \"plot\" tab in the viewer should update interactively, showing you how scale will be modified in the output compared to the input. Click on the \"Preview\" tab of the viewer. There should be a notice to the effect that this is a bad idea. This is because the scale we have estimated includes contrast degradation due to poor resolution and flexibility. OccuPy does not allow you to use this for modifying maps, because it can't \"compensate\" for flexibility. The big button \"modify map\" should also be inactivated. When you enabled any modification, the scale-mode just below the modification options was changed to \"occupancy\" and can't be changed as long as you want to modify. This is again because OccuPy can't modify poor resolution, so it forces occupancy-mode. Click \"Estimate scale\" again to estimate the occupancy-mode local scale. This should take a few seconds and then the new scale should be selected in the \"scale map\" drop-down menu, now containing \"occ\" in its name. There's more to this To learn how parameter adjustment can help you get a better estimate, consult the tutorial on occupancy estimation later. 8. Modify by local scale Click the \"Preview\" tab of the viewer. Note that this preview is rough. Try to remove the membrane by enabling attenuation and inspecting the preview as you alter the attenuation power by dragging the slider. Try the same by sigmoid modification. Note that sigmoid has two parameters. Select the \"plot\" tab of the viewer to see how these modifications would alter the scale of the output compared to input. Where the colored line is below the dashed line, scale will be attenuated. Converesely, where the line is above the dashed line, scale will be amplified. Click the button \"modify Map\" to generate all desired modifications. When completed, the preview is still just a preview . To see the output, please click \"Launch ChimeraX\". This will open the original map and all modifications, but only the original is visible by default . Read on. There's more to this To understand map modification, consult the tutorial on map modification later. 9. Inspect modification in ChimeraX Change the level (threshold) of the input and all modified maps to 0.06 by using the chimeraX command-line tool to run occupy_level 0.06 . Check the difference between the modifications, comparing to the \"plot\" tab in the OccuPy GUI. Close ChimeraX 10. Final notes Click \"Session->View full log\" in the menu field. Note that all run setting have been saved according to the same unique run-ID that you saw in the output log. This log is persistent. If you close OccuPy and start it again, the numbers will be incremented, and everything you did before and do now will be in the full log. Maps are over-written by default. If you alter the input lowpass to 10\u00c5 and re-estimate local scale, the previously estimated scale is gone. But the parameters to re-generate it is in the full log, provided that you know the run ID. You might want to play with a few more instructive maps. Here are a few entries that might be interesting to test OccuPy. Remember to use the emdb-fetch button in the GUI, or the --emdb <ID> flag on the command-line. | Entry | Sample | Box-size | ---|-----------------------------------------------|--------------------------------|----------| | 27842 | Twinkle helicase | 320 | | 30185 | F-actin | 320 | | 33437 | RNA polymerase II + nucleosome | 240 |","title":"Intro tutorial"},{"location":"Tutorials/intro/#an-intro-tutorial","text":"This is a general tutorial to get acquainted with the GUI and workflow. There's something you should know It will be useful to read the GUI overview first, or refer to it through this tutorial. The devil is in the details There are more instructive tutorials for individual use cases, which also clarify limitations and effects of adjusting input parameters. It is recommended that you do this quick general tutorial first, then the specific ones.","title":"An intro tutorial"},{"location":"Tutorials/intro/#1-start-occupy","text":"Open OccuPy by double-clicking the distributed binary or calling occupy_gui in a terminal. If you are unsure where the GUI will run and put output files, or want to change this, click \"Session\"->\"Change location\" in the top menu. You will find three (3) large buttons above the ouput log, called \"Estimate Scale\", \"Modify Map\", and \"Launch chimeraX\". These should all be greyed out. Check that the far-right button to start ChimeraX does not indicate \"(not found)\". If ChimeraX was not found, you will not be able to invoke ChimeraX from the OccuPy GUI. Please see the section for troubleshooting chimeraX to remedy this, or use the workaround below. Workaround OccuPy writes a chimeraX command script (.cxc) every time you estimate the scale or modify a map. You can open this through chimeraX instead of using OccuPy to launch chimeraX. Just make sure to use \"File\"->\"close session\" in chimeraX before you open the .cxc-file written by OccuPy.","title":"1. Start OccuPy"},{"location":"Tutorials/intro/#2-open-a-map","text":"To open an input file we would normally click \"browse\" in the top-right corner of the OccuPy window. For this tutorial we will use a map from the emdb instead. Click the \"emdb\" button in the top-right corner of the OccuPy window. A small dialog should open asking to specify the unique ID of the map in the electron microscopy database. Enter the number 3061 and click \"Fetch\". This will download, unzip and open a relatively small map of the transmembrane protein gamma-secretase in the current working directory. In the \"Input\" tab of the viewer, the input map can be inspected. Just below the viewer, select the z-dimension and change the slice number to 96 to see the transmembrane helices across the light-grey detergent micelle, as well as the extracellular domain.","title":"2. Open a map"},{"location":"Tutorials/intro/#3-notice-the-kernel-settings","text":"Based on the input, reasonable kernel settings were derived automatically. In this case, a low-pass of 8\u00c5 will be applied to make solvent estimation easier. a sphere with radius 2.86\u00c5 will be used to estimate the local scale. a cube of 5 pixels (voxels) in each dimension will hold a binary mask with the above radial cutoff. of all the pixels selected by the binary mask, the scale will be proportional to the bottom 96.47% percentile, or the top 3.53% percentile the above parameters results in 93 pixels (voxels) being sampled around each map pixel (voxel). a region of 12 pixels (voxels) in each dimension will be used to determine the scale-normalizing value. This value is always 12 by default, and not estimated. Do not change these settings for this tutorial.","title":"3. Notice the kernel settings"},{"location":"Tutorials/intro/#4-estimate-resolution-mode-local-scale","text":"Make sure \"resolution\" is checked under the \"Modification options\". Run OccuPy by clicking the Big button labeled \"Estimate scale\" just above the output log. This should finish in a few seconds. Notice that the run is individually numbered as \"1-1\" in the output log. There's more to this To learn how parameter adjustment can help you get a better estimate, consult the tutorial on relative resolution estimation later.","title":"4. Estimate resolution-mode local scale"},{"location":"Tutorials/intro/#5-assess-the-scale","text":"You will find that the estimated scale has been added to the \"scale map\" drop-down and is thus also rendered in the viewer tab \"Scale\". Click this viewer tab and drag the slider to check the estimated scale. To further inspect the local scale, click the big button labeled \"Launch ChimeraX\" to the far right above the output log. This will launch chimeraX and run a command script written by OccuPy the last time you ran anything through the GUI. In this case you should see the input map colored by the estimated scale, along with a color key. Change the color of map #1 to grey. Next, in the chimeraX command-line tool, run the command scale_color #1 #2 . This will re-color map #1 by the estimated scale (map #2), according to the color key. Close chimeraX.","title":"5. Assess the scale"},{"location":"Tutorials/intro/#6-assess-the-solvent-model","text":"The solvent model is ony used for modification, but it is nonetheless a good idea to check it. Click the tab \"Solvent model\" next to the \"output log\" tab at the bottom of the OccuPy GUI. The green line is the solvent model fit as a gaussian to the map histogram. It appears parabolic since this is a log-plot. The red line is the confidence of voxel values above solvent. Because we have a solvent model, we also have a confidence map. This has been opened in the viewer tab \"Conf.\". Click this tab and inspect what occupy thinks is solvent. You should find that the detergent is also identified as \"stuff\" (being white), as opposed to solvent (black).","title":"6. Assess the solvent model"},{"location":"Tutorials/intro/#7-estimate-occupancy-mode-local-scale","text":"Click on the \"amplify\" tab of modification options on the left. Enable it and drag the slider. The \"plot\" tab in the viewer should update interactively, showing you how scale will be modified in the output compared to the input. Click on the \"Preview\" tab of the viewer. There should be a notice to the effect that this is a bad idea. This is because the scale we have estimated includes contrast degradation due to poor resolution and flexibility. OccuPy does not allow you to use this for modifying maps, because it can't \"compensate\" for flexibility. The big button \"modify map\" should also be inactivated. When you enabled any modification, the scale-mode just below the modification options was changed to \"occupancy\" and can't be changed as long as you want to modify. This is again because OccuPy can't modify poor resolution, so it forces occupancy-mode. Click \"Estimate scale\" again to estimate the occupancy-mode local scale. This should take a few seconds and then the new scale should be selected in the \"scale map\" drop-down menu, now containing \"occ\" in its name. There's more to this To learn how parameter adjustment can help you get a better estimate, consult the tutorial on occupancy estimation later.","title":"7. Estimate occupancy-mode local scale"},{"location":"Tutorials/intro/#8-modify-by-local-scale","text":"Click the \"Preview\" tab of the viewer. Note that this preview is rough. Try to remove the membrane by enabling attenuation and inspecting the preview as you alter the attenuation power by dragging the slider. Try the same by sigmoid modification. Note that sigmoid has two parameters. Select the \"plot\" tab of the viewer to see how these modifications would alter the scale of the output compared to input. Where the colored line is below the dashed line, scale will be attenuated. Converesely, where the line is above the dashed line, scale will be amplified. Click the button \"modify Map\" to generate all desired modifications. When completed, the preview is still just a preview . To see the output, please click \"Launch ChimeraX\". This will open the original map and all modifications, but only the original is visible by default . Read on. There's more to this To understand map modification, consult the tutorial on map modification later.","title":"8. Modify by local scale"},{"location":"Tutorials/intro/#9-inspect-modification-in-chimerax","text":"Change the level (threshold) of the input and all modified maps to 0.06 by using the chimeraX command-line tool to run occupy_level 0.06 . Check the difference between the modifications, comparing to the \"plot\" tab in the OccuPy GUI. Close ChimeraX","title":"9. Inspect modification in ChimeraX"},{"location":"Tutorials/intro/#10-final-notes","text":"Click \"Session->View full log\" in the menu field. Note that all run setting have been saved according to the same unique run-ID that you saw in the output log. This log is persistent. If you close OccuPy and start it again, the numbers will be incremented, and everything you did before and do now will be in the full log. Maps are over-written by default. If you alter the input lowpass to 10\u00c5 and re-estimate local scale, the previously estimated scale is gone. But the parameters to re-generate it is in the full log, provided that you know the run ID. You might want to play with a few more instructive maps. Here are a few entries that might be interesting to test OccuPy. Remember to use the emdb-fetch button in the GUI, or the --emdb <ID> flag on the command-line. | Entry | Sample | Box-size | ---|-----------------------------------------------|--------------------------------|----------| | 27842 | Twinkle helicase | 320 | | 30185 | F-actin | 320 | | 33437 | RNA polymerase II + nucleosome | 240 |","title":"10. Final notes"},{"location":"Tutorials/case/est_occ/","text":"Estimate occupancy Recommendation Please read the GUI overview and conduct the intro tutorial first. To estimate occupancy we must try to remove contrast degradation due to e.g. flexibility. Even this is possible to achieve perfectly, you should think of the estimate as relative, in the sense that lower occupancy regions is confidently lower than those estimated higher, but that there is an unquantified uncertainty to the estimated occupancy as an absolute number. The following steps highlight factors influencing this, and how to make the necessary adjustments to fit your purpose. 1. First pass estimate Open the input map. Set the scale mode to \"occupancy\" and estimate the scale. Click the button \"Launch ChimeraX\" to view the output. 2. Sanity check Check that the output log does not show any warnings (or errors). Check the \"Conf.\" tab in the viewer. It should be white where there is \"stuff\", and black where there is solvent. If this si not the case, your solvent model might be bad. This is not an issue for occupancy estimation, but it will be if you want to modify later. If ypu just want to estimate occupancy, go to step 3. Otherwise, check the solvent model on the tab next to the output log. The green parabola should fit the histogram solvent peak near 0 quite well and drop faster than the histogram. If not, you may need to increase the input lowpass cutoff in the kernel settings, or even use a solvent definition. There is a dedicated tutorial for this, that you should do first if you think this might be necessary. 3. Evaluate Kernel settings Strong scatterers, variations in resolution, or any of a number of other factors may cause an unreasonable occupancy estimate based on your expectation and the assumptions OccuPy is built on. You can explore settings to increase the utility (and possibly also the fidelity) of the occupancy estimate, but note that this creates confirmation bias in the results based on your expectations. Always report the kernel settings used, which are documented in the full GUI log, or through command line by using --verbose . To evaluate a new kernel setting, re-estimate the scale and inspect the \"Scale\" tab of the viewer. You can also re-name the file \"scale_occ_<input_file_name>.mrc\" and open it manually in a ChimeraX-session opened through the GUI. Remember to use the chimeraX command-line tool to run \"scale_color #1 # \" to color the input map by the new scale. 3.1 Input lowpass The input lowpass cutoff is used to neutralize resolution-dependent effects, but does introduce some spatial correlation, so that the local occupancy is averaged. If your input map ... is higher resolution than the cutoff : Try reducing this number, which will give you better resolution in the scale estimate. See also point 2. has components resolved worse than the cutoff : Increase the lowpass frequency to make sure all the occupancy is estimated at the same resolution in all parts of the map. 3.2 The Kernel radius and size These define the region around each pixel where OccuPy determines the local scale. That is, the define what \"local\" means. The kernel size is the maximum box dimension, and the radius is that of a spherical mask placed at the center of that box. The kernel is determined as the intersection of these. the number of voxels in this intersection is shown as the number of samples. Gist 1. The larger the kernel, the more samples and statistical certainty. 2. The larger the kernel, the more you average the estimate. 3. The kernel can typically be very small without problem. Look at the \"Scale\" tab of the Occupy viewer. If your scale estimate... Looks like \"blocks\", then the kernel size is much smaller than the radius. This is not a problem, but you could reduce the radius to define a more spherical region around each map location. Looks much lower resolution that the input map, then you might do well to reduce the kernel size and radius. 3.3 Tau percentile To reduce the influence of voxel-value outliers in the scale estimate, some voxel values are always \"rejected\". The tau percentile defines how many sample values should be rejected. The value of tau is optimally calculated based on your kernel settings (to reduce the probability of over- and under-estimating the scale), so you should not change it unless you have good reason to do so. Always report the kernel settings Gist 1. Reducing the tau percentile will increase the occupancy estimate of all regions, and vice versa. 2. Tau is automatically calculated to minimize both over- and under-estimation. Look at the \"Scale\" tab of the viewer. In your scale estimate... is homogeneous and nearly all white, then you might have a very homogeneous occupancy. If you want to push the relative occupancy into a range where you might tell components apart, try increasing the tau percentile an re-estimate the scale. This is no longer a good approximation of absolute occupancy is only white for a very small region that does not correspond to what you would expect to be at full occupancy, try reducing the tau percentile. It might also be better to adjust the tile-size as we will soon discuss, and use the theoretically derived value for tau. 3.4 Tile size OccuPy normalizes the estimated scale against a region of the map where it in some sense finds maximal contrast. The size of this region defines the size of the \"full occupancy\" region. This region can be chosen smaller than you full-occupancy component, but if you make it too small then variations in atomic mass might start to affect the estimate. Gist Increasing the tile size will reduce the influence of high local mass, and vice versa. Setting the tile-size too large will cause systematic over-estimation of local scale. Look at the \"Scale\" tab of the viewer. In your scale estimate... is only white for a very small region that does not correspond to what you would expect to be at full occupancy, try increasing the tile-size. 4. Evaluate the estimated occupancy If the occupancy is accurately estimated, then map modification by amplification should be possible to apply at infinite power, to equalize occupancy across the map. If the scale is under-estimated, any such region will display exaggerated occupancy, effectively over-compensated. This can be made evident by e.g. lowpass filtering. Without changing the scale estimation parameters, enable \"output lowpass\" and set the value much higher than the map resolution, e.g. 20\u00c5. Select the \"Amplify\" tab under modification options. Enable it and set the power to 30. Click \"Modify Map\" Click \"Launch chimeraX\", hide the input map and show the modified map. If regions colored by lower scale appear at lower threshold values than regions at high scale, then the occupancy appears to have been under-estimated. WE are working on a way to automate this feedback cycle to get a more accurate occupancy estimate, but for now it might be prudent to alter the scale kernel settings as described above to better estimate the occupancy. 5. Final notes Because a reduced tile-size emphasizes variations in mass even when occupancy is the same, a much reduced tile size is potentially useful to estimate relative mass or occupancy when the relative mass is known. There are however better methods available for this purpose, which we recommend for accurate estimation. OccuPy simply exposes these methods where they might be relevant for fast and highly resolved estimation in the absence of ground-truth mass.","title":"Estimate occupancy"},{"location":"Tutorials/case/est_occ/#estimate-occupancy","text":"Recommendation Please read the GUI overview and conduct the intro tutorial first. To estimate occupancy we must try to remove contrast degradation due to e.g. flexibility. Even this is possible to achieve perfectly, you should think of the estimate as relative, in the sense that lower occupancy regions is confidently lower than those estimated higher, but that there is an unquantified uncertainty to the estimated occupancy as an absolute number. The following steps highlight factors influencing this, and how to make the necessary adjustments to fit your purpose.","title":"Estimate occupancy"},{"location":"Tutorials/case/est_occ/#1-first-pass-estimate","text":"Open the input map. Set the scale mode to \"occupancy\" and estimate the scale. Click the button \"Launch ChimeraX\" to view the output.","title":"1. First pass estimate"},{"location":"Tutorials/case/est_occ/#2-sanity-check","text":"Check that the output log does not show any warnings (or errors). Check the \"Conf.\" tab in the viewer. It should be white where there is \"stuff\", and black where there is solvent. If this si not the case, your solvent model might be bad. This is not an issue for occupancy estimation, but it will be if you want to modify later. If ypu just want to estimate occupancy, go to step 3. Otherwise, check the solvent model on the tab next to the output log. The green parabola should fit the histogram solvent peak near 0 quite well and drop faster than the histogram. If not, you may need to increase the input lowpass cutoff in the kernel settings, or even use a solvent definition. There is a dedicated tutorial for this, that you should do first if you think this might be necessary.","title":"2. Sanity check"},{"location":"Tutorials/case/est_occ/#3-evaluate-kernel-settings","text":"Strong scatterers, variations in resolution, or any of a number of other factors may cause an unreasonable occupancy estimate based on your expectation and the assumptions OccuPy is built on. You can explore settings to increase the utility (and possibly also the fidelity) of the occupancy estimate, but note that this creates confirmation bias in the results based on your expectations. Always report the kernel settings used, which are documented in the full GUI log, or through command line by using --verbose . To evaluate a new kernel setting, re-estimate the scale and inspect the \"Scale\" tab of the viewer. You can also re-name the file \"scale_occ_<input_file_name>.mrc\" and open it manually in a ChimeraX-session opened through the GUI. Remember to use the chimeraX command-line tool to run \"scale_color #1 # \" to color the input map by the new scale.","title":"3. Evaluate Kernel settings"},{"location":"Tutorials/case/est_occ/#31-input-lowpass","text":"The input lowpass cutoff is used to neutralize resolution-dependent effects, but does introduce some spatial correlation, so that the local occupancy is averaged. If your input map ... is higher resolution than the cutoff : Try reducing this number, which will give you better resolution in the scale estimate. See also point 2. has components resolved worse than the cutoff : Increase the lowpass frequency to make sure all the occupancy is estimated at the same resolution in all parts of the map.","title":"3.1 Input lowpass"},{"location":"Tutorials/case/est_occ/#32-the-kernel-radius-and-size","text":"These define the region around each pixel where OccuPy determines the local scale. That is, the define what \"local\" means. The kernel size is the maximum box dimension, and the radius is that of a spherical mask placed at the center of that box. The kernel is determined as the intersection of these. the number of voxels in this intersection is shown as the number of samples. Gist 1. The larger the kernel, the more samples and statistical certainty. 2. The larger the kernel, the more you average the estimate. 3. The kernel can typically be very small without problem. Look at the \"Scale\" tab of the Occupy viewer. If your scale estimate... Looks like \"blocks\", then the kernel size is much smaller than the radius. This is not a problem, but you could reduce the radius to define a more spherical region around each map location. Looks much lower resolution that the input map, then you might do well to reduce the kernel size and radius.","title":"3.2 The Kernel radius and size"},{"location":"Tutorials/case/est_occ/#33-tau-percentile","text":"To reduce the influence of voxel-value outliers in the scale estimate, some voxel values are always \"rejected\". The tau percentile defines how many sample values should be rejected. The value of tau is optimally calculated based on your kernel settings (to reduce the probability of over- and under-estimating the scale), so you should not change it unless you have good reason to do so. Always report the kernel settings Gist 1. Reducing the tau percentile will increase the occupancy estimate of all regions, and vice versa. 2. Tau is automatically calculated to minimize both over- and under-estimation. Look at the \"Scale\" tab of the viewer. In your scale estimate... is homogeneous and nearly all white, then you might have a very homogeneous occupancy. If you want to push the relative occupancy into a range where you might tell components apart, try increasing the tau percentile an re-estimate the scale. This is no longer a good approximation of absolute occupancy is only white for a very small region that does not correspond to what you would expect to be at full occupancy, try reducing the tau percentile. It might also be better to adjust the tile-size as we will soon discuss, and use the theoretically derived value for tau.","title":"3.3 Tau percentile"},{"location":"Tutorials/case/est_occ/#34-tile-size","text":"OccuPy normalizes the estimated scale against a region of the map where it in some sense finds maximal contrast. The size of this region defines the size of the \"full occupancy\" region. This region can be chosen smaller than you full-occupancy component, but if you make it too small then variations in atomic mass might start to affect the estimate. Gist Increasing the tile size will reduce the influence of high local mass, and vice versa. Setting the tile-size too large will cause systematic over-estimation of local scale. Look at the \"Scale\" tab of the viewer. In your scale estimate... is only white for a very small region that does not correspond to what you would expect to be at full occupancy, try increasing the tile-size.","title":"3.4 Tile size"},{"location":"Tutorials/case/est_occ/#4-evaluate-the-estimated-occupancy","text":"If the occupancy is accurately estimated, then map modification by amplification should be possible to apply at infinite power, to equalize occupancy across the map. If the scale is under-estimated, any such region will display exaggerated occupancy, effectively over-compensated. This can be made evident by e.g. lowpass filtering. Without changing the scale estimation parameters, enable \"output lowpass\" and set the value much higher than the map resolution, e.g. 20\u00c5. Select the \"Amplify\" tab under modification options. Enable it and set the power to 30. Click \"Modify Map\" Click \"Launch chimeraX\", hide the input map and show the modified map. If regions colored by lower scale appear at lower threshold values than regions at high scale, then the occupancy appears to have been under-estimated. WE are working on a way to automate this feedback cycle to get a more accurate occupancy estimate, but for now it might be prudent to alter the scale kernel settings as described above to better estimate the occupancy.","title":"4. Evaluate the estimated occupancy"},{"location":"Tutorials/case/est_occ/#5-final-notes","text":"Because a reduced tile-size emphasizes variations in mass even when occupancy is the same, a much reduced tile size is potentially useful to estimate relative mass or occupancy when the relative mass is known. There are however better methods available for this purpose, which we recommend for accurate estimation. OccuPy simply exposes these methods where they might be relevant for fast and highly resolved estimation in the absence of ground-truth mass.","title":"5. Final notes"},{"location":"Tutorials/case/est_res/","text":"Estimate relative resolution Recommendation Please read the GUI overview and conduct the intro tutorial first. OccuPy was not designed to accurately quantify local resolution, but rather to try to disregard contrast attenuation due to solely to variations in e.g. flexibility. It will however accurately estimate relative local resolution, which might inform you on what parts are consistent and favoured for alignment. This includes all effects, so think of it as a quality estimate of the map, rather than resolution. Other tools are available to estimate resolution on an absolute scale, which might be more suitable to use. The benefit of OccuPy is that it is fast and easy to use and adjust, so that it's easier to use for qualitative map analysis. This is not absolute resolution You will not get a number that corresponds to the resolution at each point in the map. You will get a \"quality\" score that tells you how well resolved each region is, compared to the best resolved region. 1. First pass estimate Open the input map. Set the scale mode to \"resolution\" and estimate the scale. Click the button \"Launch ChimeraX\" to view the output. 2. Sanity check Check that the output log does not show any warnings (or errors). 3. Evaluate Kernel settings Strong scatterers, variations in resolution, or any of a number of other factors may cause strong contrast. This means that the signal-to-noise ratio (SNR) is higher, which according to typical cryo-EM estimates more confidence in the estimated resolution, but not necessarily higher resolution. OccuPy evaluates contrast, which will be in proportion to SNR, which is thus not ideal for estimating resolution. It is thus prudent to be cautious, but OccuPy was built to be robust to outliers so with caution everything should be fine. Some settings may need be adjusted, nearly identically to that described in the tuorial to estimate occupancy. When you explore settings to increase the utility (and possibly also the fidelity) of the resolution estimate, note that this creates confirmation bias in the results based on your expectations. Always report the kernel settings used, which are documented in the full GUI log, or through command line by using --verbose . To evaluate a new kernel setting, re-estimate the scale and inspect the \"Scale\" tab of the viewer. You can also re-name the file \"scale_res_<input_file_name>.mrc\" and open it manually in a ChimeraX-session opened through the GUI. Remember to use the chimeraX command-line tool to run \"scale_color #1 # \" to color the input map by the new scale. 3.1 Input lowpass The input lowpass is inconsequential for the resolution estimation. 3.2 The Kernel radius and size These define the region around each pixel where OccuPy determines the local scale. That is, the define what \"local\" means. The kernel size is the maximum box dimension, and the radius is that of a spherical mask placed at the center of that box. The kernel is determined as the intersection of these. the number of voxels in this intersection is shown as the number of samples. Gist The larger the kernel, the more samples and statistical certainty. The larger the kernel, the more you average the estimate. The kernel can typically be very small without problem. Look at the \"Scale\" tab of the Occupy viewer. If your scale estimate... Looks like \"blocks\", then the kernel size is much smaller than the radius. This is not a problem, but you could reduce the radius to define a more spherical region around each map location. Looks much lower resolution that the input map, then you might do well to reduce the kernel size and radius. 3.3 Tau percentile To reduce the influence of voxel-value outliers in the scale estimate, some voxel values are always \"rejected\". The tau percentile defines how many sample values should be rejected. The value of tau is optimally calculated based on your kernel settings (to reduce the probability of over- and under-estimating the scale), so you should not change it unless you have good reason to do so. Always report the kernel settings Gist Reducing the tau percentile will increase the resolution estimate (as in the estimate will indicate better resolution) of all regions, and vice versa. Tau is automatically calculated to minimize both over- and under-estimation. Look at the \"Scale\" tab of the viewer. In your scale estimate... is homogeneous and nearly all white, then you might have a very homogeneous resolution. If you want to push the relative resolution into a range where you might tell components apart, try increasing the tau percentile an re-estimate the scale. is only white for a very small region that does not correspond to what you would expect to be at \"best resolution\", try reducing the tau percentile. It might also be better to adjust the tile-size as we will soon discuss, and use the theoretically derived value for tau. 3.4 Tile size OccuPy normalizes the estimated scale against a region of the map where it in some sense finds maximal contrast. The size of this region defines the size of the \"best resolution\" region. This region can be chosen smaller than you \"best-resolution component\", but if you make it too small then variations in atomic mass might start to affect the estimate. Gist Increasing the tile size will reduce the influence of high local mass, and vice versa. Setting the tile-size too large will cause systematic over-estimation of local scale. Look at the \"Scale\" tab of the viewer. In your scale estimate... is only white for a very small region that does not correspond to what you would expect to be at the best resolution, try increasing the tile-size. Final notes Because a reduced tile-size emphasizes variations in mass even when resolution is the same, a much reduced tile size is potentially useful to estimate relative mass or occupancy when the relative mass is known, but for resolution estimation it does not make much sense to reduce it too far.","title":"Estimate relative resolution"},{"location":"Tutorials/case/est_res/#estimate-relative-resolution","text":"Recommendation Please read the GUI overview and conduct the intro tutorial first. OccuPy was not designed to accurately quantify local resolution, but rather to try to disregard contrast attenuation due to solely to variations in e.g. flexibility. It will however accurately estimate relative local resolution, which might inform you on what parts are consistent and favoured for alignment. This includes all effects, so think of it as a quality estimate of the map, rather than resolution. Other tools are available to estimate resolution on an absolute scale, which might be more suitable to use. The benefit of OccuPy is that it is fast and easy to use and adjust, so that it's easier to use for qualitative map analysis. This is not absolute resolution You will not get a number that corresponds to the resolution at each point in the map. You will get a \"quality\" score that tells you how well resolved each region is, compared to the best resolved region.","title":"Estimate relative resolution"},{"location":"Tutorials/case/est_res/#1-first-pass-estimate","text":"Open the input map. Set the scale mode to \"resolution\" and estimate the scale. Click the button \"Launch ChimeraX\" to view the output.","title":"1. First pass estimate"},{"location":"Tutorials/case/est_res/#2-sanity-check","text":"Check that the output log does not show any warnings (or errors).","title":"2. Sanity check"},{"location":"Tutorials/case/est_res/#3-evaluate-kernel-settings","text":"Strong scatterers, variations in resolution, or any of a number of other factors may cause strong contrast. This means that the signal-to-noise ratio (SNR) is higher, which according to typical cryo-EM estimates more confidence in the estimated resolution, but not necessarily higher resolution. OccuPy evaluates contrast, which will be in proportion to SNR, which is thus not ideal for estimating resolution. It is thus prudent to be cautious, but OccuPy was built to be robust to outliers so with caution everything should be fine. Some settings may need be adjusted, nearly identically to that described in the tuorial to estimate occupancy. When you explore settings to increase the utility (and possibly also the fidelity) of the resolution estimate, note that this creates confirmation bias in the results based on your expectations. Always report the kernel settings used, which are documented in the full GUI log, or through command line by using --verbose . To evaluate a new kernel setting, re-estimate the scale and inspect the \"Scale\" tab of the viewer. You can also re-name the file \"scale_res_<input_file_name>.mrc\" and open it manually in a ChimeraX-session opened through the GUI. Remember to use the chimeraX command-line tool to run \"scale_color #1 # \" to color the input map by the new scale.","title":"3. Evaluate Kernel settings"},{"location":"Tutorials/case/est_res/#31-input-lowpass","text":"The input lowpass is inconsequential for the resolution estimation.","title":"3.1 Input lowpass"},{"location":"Tutorials/case/est_res/#32-the-kernel-radius-and-size","text":"These define the region around each pixel where OccuPy determines the local scale. That is, the define what \"local\" means. The kernel size is the maximum box dimension, and the radius is that of a spherical mask placed at the center of that box. The kernel is determined as the intersection of these. the number of voxels in this intersection is shown as the number of samples. Gist The larger the kernel, the more samples and statistical certainty. The larger the kernel, the more you average the estimate. The kernel can typically be very small without problem. Look at the \"Scale\" tab of the Occupy viewer. If your scale estimate... Looks like \"blocks\", then the kernel size is much smaller than the radius. This is not a problem, but you could reduce the radius to define a more spherical region around each map location. Looks much lower resolution that the input map, then you might do well to reduce the kernel size and radius.","title":"3.2 The Kernel radius and size"},{"location":"Tutorials/case/est_res/#33-tau-percentile","text":"To reduce the influence of voxel-value outliers in the scale estimate, some voxel values are always \"rejected\". The tau percentile defines how many sample values should be rejected. The value of tau is optimally calculated based on your kernel settings (to reduce the probability of over- and under-estimating the scale), so you should not change it unless you have good reason to do so. Always report the kernel settings Gist Reducing the tau percentile will increase the resolution estimate (as in the estimate will indicate better resolution) of all regions, and vice versa. Tau is automatically calculated to minimize both over- and under-estimation. Look at the \"Scale\" tab of the viewer. In your scale estimate... is homogeneous and nearly all white, then you might have a very homogeneous resolution. If you want to push the relative resolution into a range where you might tell components apart, try increasing the tau percentile an re-estimate the scale. is only white for a very small region that does not correspond to what you would expect to be at \"best resolution\", try reducing the tau percentile. It might also be better to adjust the tile-size as we will soon discuss, and use the theoretically derived value for tau.","title":"3.3 Tau percentile"},{"location":"Tutorials/case/est_res/#34-tile-size","text":"OccuPy normalizes the estimated scale against a region of the map where it in some sense finds maximal contrast. The size of this region defines the size of the \"best resolution\" region. This region can be chosen smaller than you \"best-resolution component\", but if you make it too small then variations in atomic mass might start to affect the estimate. Gist Increasing the tile size will reduce the influence of high local mass, and vice versa. Setting the tile-size too large will cause systematic over-estimation of local scale. Look at the \"Scale\" tab of the viewer. In your scale estimate... is only white for a very small region that does not correspond to what you would expect to be at the best resolution, try increasing the tile-size.","title":"3.4 Tile size"},{"location":"Tutorials/case/est_res/#final-notes","text":"Because a reduced tile-size emphasizes variations in mass even when resolution is the same, a much reduced tile size is potentially useful to estimate relative mass or occupancy when the relative mass is known, but for resolution estimation it does not make much sense to reduce it too far.","title":"Final notes"},{"location":"Tutorials/case/modification/","text":"Modify a map You need an occupancy estimate Please conduct the tutorial to estimate occupancy before this toturial. You will use the same parameters to modify as accurately as possible Map modification in OccuPy aims to alter the occupancy of map components. The output aims to emulate the reconstruction that is expected if the input data had been more homogeneous, at either lower or higher occupancy. 1. Optimize parameters For fidelity of the modified map (as representing something genuinely possible given the data that was used to make the input map) the occupancy should be as accurate as possible. The tutorial on occupancy esstimation guides you to do so. In some cases you may just want to achieve a given effect. It's up to you. But determine the scale kernel settings you want, and enter them in the GUI, starting from the top down to avoid re-estimation of values you've entered. 2. Validate the solvent model No joke This is neccessary. Do not skip it. You are not saving time by doing so. To reduce amplification of noise, OccuPy does not permit modification where the confidence over solvent is low. The confidence depends on the solvent model, which fits a Gaussian to the solvent peak of the map histogram. Check the solvent model tab next to the output log. You want to see that the green parabola coincides well with the solvent peak around ~0, and that it drops significantly faster than the voxel intensity distribution in black. If not, you may need to low-pass the input to a higher value as in step 2 of this tutorial, or use a solvent definition as per this other tutorial. Click the confidence tab of the viewer labeled \"Conf.\", and inspect it. Toggle between this tab and the input to evaluate how well the confidence was estimated. If the solvent model look bad and/or the confidence map does not cover the regions of the map that you are interested in modifying, you will need to alter settings and/or input to achieve a more permissive confidence map. There are two principal strategies: Create a solvent definition. There is a separate tutorial for this. Alter the input lowpass setting. If you have just optimized your scale-kernel settings, this might be annoying. 3. Estimate occupancy Make sure occupancy-mode is selected just below the modification tabs, and click \"Estimate scale\". This will re-estimate and set the occupancy-mode estimate as active. 4. Optimize modification Consider which modification to use. More than one type can be generated at the same time to generate multiple output maps. The effect of multiple modification types are not additive, i.e. they are not compounded or combined. Amplify Attenuate Sigmoid Amplification will effectively make low-occupancy components higher. The output map scale will be mapped by a an inverse power-scaling, which the user specifies. A power of 1 thus means that the output scale is the same as the input, which would leave the output map identical to the input. Higher values signify stronger amplification, and values in the range 2-5 are typically useful. Higher values approach equalization, which emulates full occupancy at all non-solvent points. Amplification Amplification is useful to visualize a map with weak components at a single threshold. As amplification, but with a (non-inverse) power scaling. Again, a power of 1 means that the output scale is the same as the input, which would leave the output map identical to the input. Higher values signify stronger attenuation, and values in the range 2-5 tend to be useful. Higher values leave only full occupancy regions, effectively removing any other regions. Attenuation Attenuation is useful to visualize a map with uninteresting weaker components, by removing them. Detergent belts is a good example. The sigmoid modification combines attenuation of lower-scale components with amplification of higher scale components. Again, a power of 1 means that the output scale is identical to the input, and no modification will occur. The sigmoid modification takes a second parameter, which we call pivot. The pivot value is the threshold scale value that will remain unchanged. Regions where the scale was estimated above the pivot will be amplified, and conversely regions with scale lower than the pivot will be attenuated. Sigmoid Sigmoid modification is useful to visualize a map with flexible components, by removing them while still amplifying relevant structured components. Click the selected modification type tab under \"Modification options\", and enable it. Increase the power of the modification to a value above 1. This will alter the \"plot\" tab of the viewer. This shows how the output map scale will depend on the estimated (input) scale. It is useful to look at this tab while changing the parameters to get a sense of sensitive the modification is to changing the modification settings. the \"preview\" tab of the viewer. This will show a rough preview of what the output will be. It is not as accurate, and does not consider the confidence map. It will therefore look fairly noisy. It is very useful to look at this tab when changing the modification settings. Dont't trust the preview Don't optmize the modification based only on the preview. Get it roughly right, and continue the tutorial. If using sigmoid modification, the pivot should also be tuned. This is arguably the most important setting for sigmoid modification, as it determines a threshold scale value that is not modified. Values below are attenuated, and values above are amplified. Once modification has been determined roughly, click \"Modify Map\". Once OccuPy returns, click \"Launch chimeraX\", or open chimeraX and open the most recent .cxc-file written in the directory where occupy is running. In chimeraX, only the input map is visualized by default, and is colored by the estimated scale. Show the modified map and compare to the input map. You can alter the threshold value of the input map and any modified map at the same time by using the command occupy_level <value> . Compare the maps and evaluate if modification should be altered. Close chimeraX, alter modification parameters, and click \"Modify Map\" again, followed by \"Launch chimeraX\". Repeat step 7 until satisfied. 5. Finalize There are two optional/extra settings worth considering when generating the final output 5.1 Suppress solvent? The solvent noise of the input map is included in the modified output by default, because OccuPy aims to emulate realistic reconstructions given homogeneous input data. However, if modification is used for visualization and the solvent model is accurate, solvent noise might only be a nuisance. 5.1 Lowpass output? Modification does alter map constituents and may increase noise. Low-pass filtration of the output might be a good idea. It can also be used to verify the estimated occupancy, as detailed in the tutorail on occupancy estimation.","title":"Modify a map"},{"location":"Tutorials/case/modification/#modify-a-map","text":"You need an occupancy estimate Please conduct the tutorial to estimate occupancy before this toturial. You will use the same parameters to modify as accurately as possible Map modification in OccuPy aims to alter the occupancy of map components. The output aims to emulate the reconstruction that is expected if the input data had been more homogeneous, at either lower or higher occupancy.","title":"Modify a map"},{"location":"Tutorials/case/modification/#1-optimize-parameters","text":"For fidelity of the modified map (as representing something genuinely possible given the data that was used to make the input map) the occupancy should be as accurate as possible. The tutorial on occupancy esstimation guides you to do so. In some cases you may just want to achieve a given effect. It's up to you. But determine the scale kernel settings you want, and enter them in the GUI, starting from the top down to avoid re-estimation of values you've entered.","title":"1. Optimize parameters"},{"location":"Tutorials/case/modification/#2-validate-the-solvent-model","text":"No joke This is neccessary. Do not skip it. You are not saving time by doing so. To reduce amplification of noise, OccuPy does not permit modification where the confidence over solvent is low. The confidence depends on the solvent model, which fits a Gaussian to the solvent peak of the map histogram. Check the solvent model tab next to the output log. You want to see that the green parabola coincides well with the solvent peak around ~0, and that it drops significantly faster than the voxel intensity distribution in black. If not, you may need to low-pass the input to a higher value as in step 2 of this tutorial, or use a solvent definition as per this other tutorial. Click the confidence tab of the viewer labeled \"Conf.\", and inspect it. Toggle between this tab and the input to evaluate how well the confidence was estimated. If the solvent model look bad and/or the confidence map does not cover the regions of the map that you are interested in modifying, you will need to alter settings and/or input to achieve a more permissive confidence map. There are two principal strategies: Create a solvent definition. There is a separate tutorial for this. Alter the input lowpass setting. If you have just optimized your scale-kernel settings, this might be annoying.","title":"2. Validate the solvent model"},{"location":"Tutorials/case/modification/#3-estimate-occupancy","text":"Make sure occupancy-mode is selected just below the modification tabs, and click \"Estimate scale\". This will re-estimate and set the occupancy-mode estimate as active.","title":"3. Estimate occupancy"},{"location":"Tutorials/case/modification/#4-optimize-modification","text":"Consider which modification to use. More than one type can be generated at the same time to generate multiple output maps. The effect of multiple modification types are not additive, i.e. they are not compounded or combined. Amplify Attenuate Sigmoid Amplification will effectively make low-occupancy components higher. The output map scale will be mapped by a an inverse power-scaling, which the user specifies. A power of 1 thus means that the output scale is the same as the input, which would leave the output map identical to the input. Higher values signify stronger amplification, and values in the range 2-5 are typically useful. Higher values approach equalization, which emulates full occupancy at all non-solvent points. Amplification Amplification is useful to visualize a map with weak components at a single threshold. As amplification, but with a (non-inverse) power scaling. Again, a power of 1 means that the output scale is the same as the input, which would leave the output map identical to the input. Higher values signify stronger attenuation, and values in the range 2-5 tend to be useful. Higher values leave only full occupancy regions, effectively removing any other regions. Attenuation Attenuation is useful to visualize a map with uninteresting weaker components, by removing them. Detergent belts is a good example. The sigmoid modification combines attenuation of lower-scale components with amplification of higher scale components. Again, a power of 1 means that the output scale is identical to the input, and no modification will occur. The sigmoid modification takes a second parameter, which we call pivot. The pivot value is the threshold scale value that will remain unchanged. Regions where the scale was estimated above the pivot will be amplified, and conversely regions with scale lower than the pivot will be attenuated. Sigmoid Sigmoid modification is useful to visualize a map with flexible components, by removing them while still amplifying relevant structured components. Click the selected modification type tab under \"Modification options\", and enable it. Increase the power of the modification to a value above 1. This will alter the \"plot\" tab of the viewer. This shows how the output map scale will depend on the estimated (input) scale. It is useful to look at this tab while changing the parameters to get a sense of sensitive the modification is to changing the modification settings. the \"preview\" tab of the viewer. This will show a rough preview of what the output will be. It is not as accurate, and does not consider the confidence map. It will therefore look fairly noisy. It is very useful to look at this tab when changing the modification settings. Dont't trust the preview Don't optmize the modification based only on the preview. Get it roughly right, and continue the tutorial. If using sigmoid modification, the pivot should also be tuned. This is arguably the most important setting for sigmoid modification, as it determines a threshold scale value that is not modified. Values below are attenuated, and values above are amplified. Once modification has been determined roughly, click \"Modify Map\". Once OccuPy returns, click \"Launch chimeraX\", or open chimeraX and open the most recent .cxc-file written in the directory where occupy is running. In chimeraX, only the input map is visualized by default, and is colored by the estimated scale. Show the modified map and compare to the input map. You can alter the threshold value of the input map and any modified map at the same time by using the command occupy_level <value> . Compare the maps and evaluate if modification should be altered. Close chimeraX, alter modification parameters, and click \"Modify Map\" again, followed by \"Launch chimeraX\". Repeat step 7 until satisfied.","title":"4. Optimize modification"},{"location":"Tutorials/case/modification/#5-finalize","text":"There are two optional/extra settings worth considering when generating the final output","title":"5. Finalize"},{"location":"Tutorials/case/modification/#51-suppress-solvent","text":"The solvent noise of the input map is included in the modified output by default, because OccuPy aims to emulate realistic reconstructions given homogeneous input data. However, if modification is used for visualization and the solvent model is accurate, solvent noise might only be a nuisance.","title":"5.1 Suppress solvent?"},{"location":"Tutorials/case/modification/#51-lowpass-output","text":"Modification does alter map constituents and may increase noise. Low-pass filtration of the output might be a good idea. It can also be used to verify the estimated occupancy, as detailed in the tutorail on occupancy estimation.","title":"5.1 Lowpass output?"},{"location":"Tutorials/case/soldef/","text":"Use a solvent definition Recommendation Please read the GUI overview and conduct the intro tutorial first. Be lazy The solvent model is only used for map modification and solvent suppression, so if you are not doing any of these, e. g. if you just need to estimate the scale, you need not do this tutorial. In some cases, the solvent peak is not dominant in the input map histogram. Common reasons include over-sharpening of a map to introduce uniform noise that dominates the solvent noise insufficient input lowpass filtering reconstructions of partial regions like viral capsids, where little to no solvent is included In these cases, OccuPy can make use of a solvent mask, that instructs it where to look for the solvent peak. However, it is not used a mask for the modification or output . There are benefits to this, like being able to find something significant outside your mask and amplifying or attenuating it as well. 1. Try a higher low-pass value This is the simple approach, and if it works satisfactorily, use it. Open the input map and estimate the scale. Inspect the \"Solvent model\" tab next to the output log. Increase the input lowpass and estimate the scale again, and note if the solvent model estimation improves. Click the \"Conf.\" tab of the viewer and inspect is OccuPy can adequately tell low-scale stuff from solvent. 2. Open an existing solvent mask OccuPy permits you to simply open an existing mask to use as the solvent definition, but it must be the same size as you input map. Click the \"browse\" button next to the \"solvent def\" drop-down menu below the viewer, and select the mask. Click the \"Sol.def.\" tab in the viewer and inspect the map. 3. Generate a solvent definition in the GUI The scale is estimated independently form the solvent model, and can be thresholded or binarized to provide a solvent defintion. Make sure the appropriate input map is open and selected Estimate the scale. Click the \"Sol.def.\" tab of the viewer and tick the checkbox \"Binarize...\" Drag the slider to alter the binarization threshold. The aim is to segment solvent and non-solvent, but it does not need to be very accurate. In the top menu, click \"Run->Generate solvent definition from scale\". This should create and save a solvent mask, named by the threshold value. This file will also be loaded and selected in the \"solvent def\" dropdown. 4. Evaluate the solvent definition To evaluate a solvent definition, we inspect the solvent model and resulting confidence. Make sure the appropriate input map is open and selected, then estimate the scale. Insepct the \"Solvent model\" tab next to the output log. The green parabola is fitted to the maked data histogram in black, whereas the original data histogram is shown in grey. Click the \"Conf.\" tab of the viewer and inspect is OccuPy can adequately tell low-scale stuff from solvent. Notice especially that the confidence might differ from the solvent definition, becasue OccuPy might estimate components as significant even though you said they might be solvent. 5. Use the solvent definition Make sure the appropriate input map and solvent defintion are both selected. Set the desired modification parameters. Click \"Modify Map\". Visualize the output by clicking \"Launch ChimeraX\" Final Notes You can unselect a solvent definition by selecting the empty filed in the \"solvent def\" dropdown. A subsequent run will not use any solvent definition.","title":"Use a solvent definition"},{"location":"Tutorials/case/soldef/#use-a-solvent-definition","text":"Recommendation Please read the GUI overview and conduct the intro tutorial first. Be lazy The solvent model is only used for map modification and solvent suppression, so if you are not doing any of these, e. g. if you just need to estimate the scale, you need not do this tutorial. In some cases, the solvent peak is not dominant in the input map histogram. Common reasons include over-sharpening of a map to introduce uniform noise that dominates the solvent noise insufficient input lowpass filtering reconstructions of partial regions like viral capsids, where little to no solvent is included In these cases, OccuPy can make use of a solvent mask, that instructs it where to look for the solvent peak. However, it is not used a mask for the modification or output . There are benefits to this, like being able to find something significant outside your mask and amplifying or attenuating it as well.","title":"Use a solvent definition"},{"location":"Tutorials/case/soldef/#1-try-a-higher-low-pass-value","text":"This is the simple approach, and if it works satisfactorily, use it. Open the input map and estimate the scale. Inspect the \"Solvent model\" tab next to the output log. Increase the input lowpass and estimate the scale again, and note if the solvent model estimation improves. Click the \"Conf.\" tab of the viewer and inspect is OccuPy can adequately tell low-scale stuff from solvent.","title":"1. Try a higher low-pass value"},{"location":"Tutorials/case/soldef/#2-open-an-existing-solvent-mask","text":"OccuPy permits you to simply open an existing mask to use as the solvent definition, but it must be the same size as you input map. Click the \"browse\" button next to the \"solvent def\" drop-down menu below the viewer, and select the mask. Click the \"Sol.def.\" tab in the viewer and inspect the map.","title":"2. Open an existing solvent mask"},{"location":"Tutorials/case/soldef/#3-generate-a-solvent-definition-in-the-gui","text":"The scale is estimated independently form the solvent model, and can be thresholded or binarized to provide a solvent defintion. Make sure the appropriate input map is open and selected Estimate the scale. Click the \"Sol.def.\" tab of the viewer and tick the checkbox \"Binarize...\" Drag the slider to alter the binarization threshold. The aim is to segment solvent and non-solvent, but it does not need to be very accurate. In the top menu, click \"Run->Generate solvent definition from scale\". This should create and save a solvent mask, named by the threshold value. This file will also be loaded and selected in the \"solvent def\" dropdown.","title":"3. Generate a solvent definition in the GUI"},{"location":"Tutorials/case/soldef/#4-evaluate-the-solvent-definition","text":"To evaluate a solvent definition, we inspect the solvent model and resulting confidence. Make sure the appropriate input map is open and selected, then estimate the scale. Insepct the \"Solvent model\" tab next to the output log. The green parabola is fitted to the maked data histogram in black, whereas the original data histogram is shown in grey. Click the \"Conf.\" tab of the viewer and inspect is OccuPy can adequately tell low-scale stuff from solvent. Notice especially that the confidence might differ from the solvent definition, becasue OccuPy might estimate components as significant even though you said they might be solvent.","title":"4. Evaluate the solvent definition"},{"location":"Tutorials/case/soldef/#5-use-the-solvent-definition","text":"Make sure the appropriate input map and solvent defintion are both selected. Set the desired modification parameters. Click \"Modify Map\". Visualize the output by clicking \"Launch ChimeraX\"","title":"5. Use the solvent definition"},{"location":"Tutorials/case/soldef/#final-notes","text":"You can unselect a solvent definition by selecting the empty filed in the \"solvent def\" dropdown. A subsequent run will not use any solvent definition.","title":"Final Notes"},{"location":"Tutorials/case/sub_mask/","text":"Make a subtraction mask Recommendation Please read the GUI overview and conduct the intro tutorial first. If you found attenuation or sigmoid modification by local scale useful, you might want to perform signal subtraction on your input data so that the subsequent reconstruction will look like the modified output. Limitation of use A subtraction mask is to be used in e.g. RELION. Any other use should be considered at your own risk or unsupported. Subtraction is only remove components A subtraction mask can only achieve attenuation of the input data. and because it will be applied uniformly to all input data, it is only appropriate for full-occupancy components. Its use is therefore currently limited to e.g. detergent regions of membrane proteins and reducing the influence of flexible regions. 1. Estimate occupancy-mode local scale Open the input map Select occupancy-model local scale just below the modification options Estimate the scale 2. Set the desired attenuation Activate either the \"Attenutate\" or \"Sigmoid\" options in the modification settings and inspect the preview tab of the viewer as you do. Once happy, click \"Modify Map\". Visualize the output by clicking \"Launch ChimeraX\" Alter the modification until you are happy with the result. 3. Generate the subtraction mask Without changing the modification parameters, click \"Run->Generate subtraction mask\" The output log will report the mask(s) written, which can be opened in e.g. chimeraX. The generated mask(s) will not be opened in the OccuPy GUI.","title":"Make a subtraction mask"},{"location":"Tutorials/case/sub_mask/#make-a-subtraction-mask","text":"Recommendation Please read the GUI overview and conduct the intro tutorial first. If you found attenuation or sigmoid modification by local scale useful, you might want to perform signal subtraction on your input data so that the subsequent reconstruction will look like the modified output. Limitation of use A subtraction mask is to be used in e.g. RELION. Any other use should be considered at your own risk or unsupported. Subtraction is only remove components A subtraction mask can only achieve attenuation of the input data. and because it will be applied uniformly to all input data, it is only appropriate for full-occupancy components. Its use is therefore currently limited to e.g. detergent regions of membrane proteins and reducing the influence of flexible regions.","title":"Make a subtraction mask"},{"location":"Tutorials/case/sub_mask/#1-estimate-occupancy-mode-local-scale","text":"Open the input map Select occupancy-model local scale just below the modification options Estimate the scale","title":"1. Estimate occupancy-mode local scale"},{"location":"Tutorials/case/sub_mask/#2-set-the-desired-attenuation","text":"Activate either the \"Attenutate\" or \"Sigmoid\" options in the modification settings and inspect the preview tab of the viewer as you do. Once happy, click \"Modify Map\". Visualize the output by clicking \"Launch ChimeraX\" Alter the modification until you are happy with the result.","title":"2. Set the desired attenuation"},{"location":"Tutorials/case/sub_mask/#3-generate-the-subtraction-mask","text":"Without changing the modification parameters, click \"Run->Generate subtraction mask\" The output log will report the mask(s) written, which can be opened in e.g. chimeraX. The generated mask(s) will not be opened in the OccuPy GUI.","title":"3. Generate the subtraction mask"},{"location":"Tutorials/case/supp_solv/","text":"Supress solvent Recommendation Please read the GUI overview and conduct the intro tutorial first. To accurately suppress solvent you primarily have to make sure that the solvent model and confidence is accurate. The following steps highlight factors influencing this, and how to make the necessary adjustments. 1. Set up the run Open the input map. Set the desired scale mode and estimate the scale. We don't need the scale at this point, but estimating it will also generate the solvent model and confidence. Check the solvent model tab next to the output log. You want to see that the green parabola coincides well with the solvent peak around ~0, and that it drops significantly faster than the voxel intensity distribution in black. If not, you may need to low-pass the input to a higher value as in step 2 of this tutorial, or use a solvent definition as per this other tutorial. Click the confidence tab of the viewer labeled \"Conf.\", and inspect it. Toggle between this tab and the input to evaluate how well the confidence was estimated. 2. Try different low-pass settings. The input low-pass setting at the top of the kernel settings is applied before solvent model fit, because it reduces the variance of the solvent noise more than anything else. By increasing it, the solvent peak tends to become more prominent. Increase the kernel setting \"Input lowpass\" by a few \u00c5. Estimate the scale again. Evaluate the confidence and solvent model again, and adjust input lowpass as appropriate. When you are happy, proceed to step 3. 3. Generate output Tick the check-box in the \"Optional/extra\" section on the bottom left. To suppress solvent on the input map without any other modifications, click \"Estimate Scale\". To suppress solvent of any modified map, click \"Modify Map\" to perform both operations. Visualize the output by clicking \"Launch ChimeraX\" Final notes The confidence map is written as an auxiliary file. You Can open it manually in the chimeraX-session to have a loof at it if you want. You can modify and use it as a mask for other purposes as well. But beware that it will be over-written the next time you estimate the scale or modify any map, unless you change its name. There is no way to provide OccuPy with a confidence, it will estimate this internally each time.","title":"Supress solvent"},{"location":"Tutorials/case/supp_solv/#supress-solvent","text":"Recommendation Please read the GUI overview and conduct the intro tutorial first. To accurately suppress solvent you primarily have to make sure that the solvent model and confidence is accurate. The following steps highlight factors influencing this, and how to make the necessary adjustments.","title":"Supress solvent"},{"location":"Tutorials/case/supp_solv/#1-set-up-the-run","text":"Open the input map. Set the desired scale mode and estimate the scale. We don't need the scale at this point, but estimating it will also generate the solvent model and confidence. Check the solvent model tab next to the output log. You want to see that the green parabola coincides well with the solvent peak around ~0, and that it drops significantly faster than the voxel intensity distribution in black. If not, you may need to low-pass the input to a higher value as in step 2 of this tutorial, or use a solvent definition as per this other tutorial. Click the confidence tab of the viewer labeled \"Conf.\", and inspect it. Toggle between this tab and the input to evaluate how well the confidence was estimated.","title":"1. Set up the run"},{"location":"Tutorials/case/supp_solv/#2-try-different-low-pass-settings","text":"The input low-pass setting at the top of the kernel settings is applied before solvent model fit, because it reduces the variance of the solvent noise more than anything else. By increasing it, the solvent peak tends to become more prominent. Increase the kernel setting \"Input lowpass\" by a few \u00c5. Estimate the scale again. Evaluate the confidence and solvent model again, and adjust input lowpass as appropriate. When you are happy, proceed to step 3.","title":"2. Try different low-pass settings."},{"location":"Tutorials/case/supp_solv/#3-generate-output","text":"Tick the check-box in the \"Optional/extra\" section on the bottom left. To suppress solvent on the input map without any other modifications, click \"Estimate Scale\". To suppress solvent of any modified map, click \"Modify Map\" to perform both operations. Visualize the output by clicking \"Launch ChimeraX\"","title":"3. Generate output"},{"location":"Tutorials/case/supp_solv/#final-notes","text":"The confidence map is written as an auxiliary file. You Can open it manually in the chimeraX-session to have a loof at it if you want. You can modify and use it as a mask for other purposes as well. But beware that it will be over-written the next time you estimate the scale or modify any map, unless you change its name. There is no way to provide OccuPy with a confidence, it will estimate this internally each time.","title":"Final notes"},{"location":"gallery/","text":"Showcase / gallery Here you will find different examples of how Occupy has been used, and helped to visualise and analyze cryo-EM maps. The first section details how to use OccuPy to reproduce the images in the paper. If you have cases where it has been useful, please consider letting one of the developer know so that we can showcase it here. From the Paper These are examples of how figures were generated for the main OccuPy paper. In some cases instructions are provided to reproduce the results. Synthetic input PDB-1UXI Mass effects EMD-33707 Modification EMD-14085 Membrane EMD-23015 Resolution (COMING SOON) EMD-13015 By the team At high resolution EMD-33707 A ribosome (COMING SOON) EMD-3943 A viral spike (COMING SOON) Unpublished data By the community","title":"View all"},{"location":"gallery/#showcase-gallery","text":"Here you will find different examples of how Occupy has been used, and helped to visualise and analyze cryo-EM maps. The first section details how to use OccuPy to reproduce the images in the paper. If you have cases where it has been useful, please consider letting one of the developer know so that we can showcase it here.","title":"Showcase / gallery"},{"location":"gallery/#from-the-paper","text":"These are examples of how figures were generated for the main OccuPy paper. In some cases instructions are provided to reproduce the results. Synthetic input PDB-1UXI Mass effects EMD-33707 Modification EMD-14085 Membrane EMD-23015 Resolution (COMING SOON) EMD-13015","title":"From the Paper"},{"location":"gallery/#by-the-team","text":"At high resolution EMD-33707 A ribosome (COMING SOON) EMD-3943 A viral spike (COMING SOON) Unpublished data","title":"By the team"},{"location":"gallery/#by-the-community","text":"","title":"By the community"},{"location":"gallery/highres/","text":"Apoferritin Versions: OccuPy 1.7.0 ChimeraX 1.4 (2022-06-03) As in thumbnail In OccuPy Fetch EMDB 33707 Set scale mode = occupancy Estimate scale Launch ChimeraX (open chimX_emd_33707.cxc through ChimeraX) In chimeraX vol gaussian #1 sdev 0.8 scale_color #5 #2 Other views In ChimeraX hide #5 show #1 vol #1 level 0.0454 surface dust #1","title":"High-res"},{"location":"gallery/highres/#apoferritin","text":"Versions: OccuPy 1.7.0 ChimeraX 1.4 (2022-06-03)","title":"Apoferritin"},{"location":"gallery/highres/#as-in-thumbnail","text":"","title":"As in thumbnail"},{"location":"gallery/highres/#in-occupy","text":"Fetch EMDB 33707 Set scale mode = occupancy Estimate scale Launch ChimeraX (open chimX_emd_33707.cxc through ChimeraX)","title":"In OccuPy"},{"location":"gallery/highres/#in-chimerax","text":"vol gaussian #1 sdev 0.8 scale_color #5 #2","title":"In chimeraX"},{"location":"gallery/highres/#other-views","text":"","title":"Other views"},{"location":"gallery/highres/#in-chimerax_1","text":"hide #5 show #1 vol #1 level 0.0454 surface dust #1","title":"In ChimeraX"},{"location":"gallery/mass/","text":"Apoferritin 11638 Versions: OccuPy 1.7.0 ChimeraX 1.4 (2022-06-03) Setup Get the PDB for annotation $ wget https://files.rcsb.org/download/7A4M.pdb In OccuPy Fetch EMDB 11638 Set extra option \"Naive normalization\" = checked Estimate scale Launch ChimeraX (open chimX_emd_11638.cxc through ChimeraX) In chimeraX Open 7A4M.pdb, here as #4 hide cartoon hide atoms select #4:95-104,48-58 show sel view sel molmap sel 8 vol #5 level 0.113 vol mask #1 surfaces #5 vol gaussian #6 sdev 0.5 hide #5 volume #7 color #00000099 scale_color #7 #2 select H hide sel surface dust #6 size 2 color #4 #bababa transparency 0 color byhetero graphics silhouettes true Other Views Waters In OccuPy Set extra option \"Naive normalization\" = unchecked Set input lowpass = 3\u00c5 Set scale_mode = occupancy Estimate scale Set sigmoid power = 30 , pivot = 0.05 Modify map Launch ChimeraX (open chimX_emd_11638.cxc through ChimeraX)","title":"Mass"},{"location":"gallery/mass/#apoferritin-11638","text":"Versions: OccuPy 1.7.0 ChimeraX 1.4 (2022-06-03)","title":"Apoferritin 11638"},{"location":"gallery/mass/#setup","text":"Get the PDB for annotation $ wget https://files.rcsb.org/download/7A4M.pdb","title":"Setup"},{"location":"gallery/mass/#in-occupy","text":"Fetch EMDB 11638 Set extra option \"Naive normalization\" = checked Estimate scale Launch ChimeraX (open chimX_emd_11638.cxc through ChimeraX)","title":"In OccuPy"},{"location":"gallery/mass/#in-chimerax","text":"Open 7A4M.pdb, here as #4 hide cartoon hide atoms select #4:95-104,48-58 show sel view sel molmap sel 8 vol #5 level 0.113 vol mask #1 surfaces #5 vol gaussian #6 sdev 0.5 hide #5 volume #7 color #00000099 scale_color #7 #2 select H hide sel surface dust #6 size 2 color #4 #bababa transparency 0 color byhetero graphics silhouettes true","title":"In chimeraX"},{"location":"gallery/mass/#other-views","text":"","title":"Other Views"},{"location":"gallery/mass/#waters","text":"","title":"Waters"},{"location":"gallery/mass/#in-occupy_1","text":"Set extra option \"Naive normalization\" = unchecked Set input lowpass = 3\u00c5 Set scale_mode = occupancy Estimate scale Set sigmoid power = 30 , pivot = 0.05 Modify map Launch ChimeraX (open chimX_emd_11638.cxc through ChimeraX)","title":"In OccuPy"},{"location":"gallery/membrane/","text":"GluK2/K5 kainate receptor 23015 Versions: OccuPy 1.8.0rc2 ChimeraX 1.4 (2022-06-03) In OccuPy Fetch EMDB 23015. Set the input lowpass to 5\u00c5. This is too low to provide a reasonable occupancy estimate, but it's the value used in the paper to show modification when occupancy is under-estimated. A better value for fidelity is probably around 10\u00c5. Set scale mode = occupancy Click \"Estimate scale\" Enable Amplification and set Power=3 Enable Attenuation and set Power=3 Enable Sigmoid and set Power=30 and Pivot=0.50 Click \"Modify Map\" Launch ChimeraX (open chimX_emd_23015.cxc through ChimeraX) In chimeraX Use the command occupy_level <value> to set the input and all modifies maps at the same threshold value. view matrix camera 1.4173e-16,-4.3526e-16,-1,-289.68,0.99756,0.069756,1.1102e-16,164.34,0.069756,-0.99756,4.4409e-16,199.43 occupy_level 0.65","title":"Membrane"},{"location":"gallery/membrane/#gluk2k5-kainate-receptor-23015","text":"Versions: OccuPy 1.8.0rc2 ChimeraX 1.4 (2022-06-03)","title":"GluK2/K5 kainate receptor 23015"},{"location":"gallery/membrane/#in-occupy","text":"Fetch EMDB 23015. Set the input lowpass to 5\u00c5. This is too low to provide a reasonable occupancy estimate, but it's the value used in the paper to show modification when occupancy is under-estimated. A better value for fidelity is probably around 10\u00c5. Set scale mode = occupancy Click \"Estimate scale\" Enable Amplification and set Power=3 Enable Attenuation and set Power=3 Enable Sigmoid and set Power=30 and Pivot=0.50 Click \"Modify Map\" Launch ChimeraX (open chimX_emd_23015.cxc through ChimeraX)","title":"In OccuPy"},{"location":"gallery/membrane/#in-chimerax","text":"Use the command occupy_level <value> to set the input and all modifies maps at the same threshold value. view matrix camera 1.4173e-16,-4.3526e-16,-1,-289.68,0.99756,0.069756,1.1102e-16,164.34,0.069756,-0.99756,4.4409e-16,199.43 occupy_level 0.65","title":"In chimeraX"},{"location":"gallery/modification/","text":"Proteasome 14085 Versions: OccuPy 1.8.0rc2 ChimeraX 1.4 (2022-06-03) In OccuPy Fetch EMDB 14085. This may take a minute, as the map is 384px. Set scale mode = occupancy Click \"Estimate scale\" Enable amplification and set Power=30 Enable Attenuation and set Power=2 Enable Sigmoid and set Power=5 and Pivot=0.22 Click \"Modify Map\" Launch ChimeraX (open chimX_emd_14085.cxc through ChimeraX) In chimeraX For comparing input (#1) and amplified (#3) hide show #1 view matrix camera -0.99855,-0.042865,-0.032681,212.84,0.053661,-0.73359,-0.67747,-405.78,0.005068,-0.67824,0.73482,1015.9 occupy_level 11 show #3 For comparing input (#1) and attenuated (#4) hide show #1 view matrix camera 0.064209,-0.9974,-0.032681,143.71,0.73227,0.06934,-0.67747,-399.85,0.67798,0.019568,0.73482,1018.3 occupy_level 7 show #4 For comparing input (#1) and sigmoid (#5) hide show #1 view matrix camera 0.064209,-0.9974,-0.032681,143.71,0.73227,0.06934,-0.67747,-399.85,0.67798,0.019568,0.73482,1018.3 occupy_level 10 show #5","title":"Modification"},{"location":"gallery/modification/#proteasome-14085","text":"Versions: OccuPy 1.8.0rc2 ChimeraX 1.4 (2022-06-03)","title":"Proteasome 14085"},{"location":"gallery/modification/#in-occupy","text":"Fetch EMDB 14085. This may take a minute, as the map is 384px. Set scale mode = occupancy Click \"Estimate scale\" Enable amplification and set Power=30 Enable Attenuation and set Power=2 Enable Sigmoid and set Power=5 and Pivot=0.22 Click \"Modify Map\" Launch ChimeraX (open chimX_emd_14085.cxc through ChimeraX)","title":"In OccuPy"},{"location":"gallery/modification/#in-chimerax","text":"For comparing input (#1) and amplified (#3) hide show #1 view matrix camera -0.99855,-0.042865,-0.032681,212.84,0.053661,-0.73359,-0.67747,-405.78,0.005068,-0.67824,0.73482,1015.9 occupy_level 11 show #3 For comparing input (#1) and attenuated (#4) hide show #1 view matrix camera 0.064209,-0.9974,-0.032681,143.71,0.73227,0.06934,-0.67747,-399.85,0.67798,0.019568,0.73482,1018.3 occupy_level 7 show #4 For comparing input (#1) and sigmoid (#5) hide show #1 view matrix camera 0.064209,-0.9974,-0.032681,143.71,0.73227,0.06934,-0.67747,-399.85,0.67798,0.019568,0.73482,1018.3 occupy_level 10 show #5","title":"In chimeraX"},{"location":"gallery/synthetic/","text":"Malate dehydrogenase Versions: OccuPy 1.7.0 ChimeraX 1.4 (2022-06-03) Gemmi 0.5.6 Relion 4.0-beta-2-commit-c3ddd0 Alter occupancy of pdb model Altered occupancy of one pdb model chain, generate theoretical density and estimate occupancy of the density using OccuPp Setup Use a bash terminal to make a tamplate for occupancy and b-factor modification. Get and prep files wget https://files.rcsb.org/download/1UXI.pdb sed -n '/^ATOM/q;p' 1UXI_noWater.pdb > header.pdb grep ^ATOM 1UXI_noWater.pdb | grep \" A \" > chain_A.pdb grep ^ATOM 1UXI_noWater.pdb | grep \" B \" > chain_B.pdb grep ^HETATM 1UXI_noWater.pdb > chain_NAD_FUM.pdb To alter the occupancy (to 40%) of atoms in chain A of the model: cat header.pdb > 1UXI_occ_template.pdb sed 's/^\\(.\\{57\\}\\).\\{4\\}/\\1xOc /' chain_A.pdb >> 1UXI_occ_template.pdb echo \"TER\" >> 1UXI_occ_template.pdb cat chain_B.pdb >> 1UXI_occ_template.pdb echo \"TER\" >> 1UXI_occ_template.pdb cat chain_NAD_FUM.pdb >> 1UXI_occ_template.pdb echo \"END\" >> 1UXI_occ_template.pdb Generate the density using gemmi, and format it using relion sed 's/1xOc/0.40/g' 1UXI_occ_template.pdb > 1UXI_occ_0.40.pdb ~/install/gemmi/gemmi sfcalc --dmin=10 1UXI_occ_0.40.pdb --write-map=raw.mrc --for=electron --unknown=O --rate 3 > log.txt relion_image_handler --new_box 100 --i raw.mrc --o cube.mrc --shift_x -5 --shift_y -5 --shift_z -15 relion_image_handler --i cube.mrc --o equal.mrc --rescale_angpix 1.66 relion_image_handler --i equal.mrc --lowpass 4 --o 1UXI_occ0.40_LP4.mrc Estimate scale and amplify, and open in chimera occupy -i 1UXI_occ0.40_LP4.mrc --occupancy -am 30 --show-chimerax chimerax chimX_1UXI_occ0.40_LP4.cxc 1UXI_occ_0.40.pdb In chimeraX, the input pdb with altered occupancies should be opened as #6. fitmap #6 inMap #3 molmap #6 20 volume #7 level 0.0545 volume mask #3 surfaces #7 scale_color #8 #2 hide #1 hide #6 models hide #7 Alter B-factors of pdb model To alter B-factors (to 200\u00c5) of the chain A of the model instead of occupancy: cat header.pdb > 1UXI_bfac_template.pdb sed 's/^\\(.\\{62\\}\\).\\{5\\}/\\1xBfa /' chain_A.pdb >> 1UXI_bfac_template.pdb echo \"TER\" >> 1UXI_bfac_template.pdb cat chain_B.pdb >> 1UXI_bfac_template.pdb echo \"TER\" >> 1UXI_bfac_template.pdb cat chain_NAD_FUM.pdb >> 1UXI_bfac_template.pdb echo \"END\" >> 1UXI_bfac_template.pdb Generate the pdb-file with altered b-factors, to be used as uinput to gemmi sed 's/1Bfac/200.0/g' 1UXI_bfac_template.pdb > 1UXI_bfac_200.pdb After this point, use the same procedure as described above for occupancy","title":"Synthetic"},{"location":"gallery/synthetic/#malate-dehydrogenase","text":"Versions: OccuPy 1.7.0 ChimeraX 1.4 (2022-06-03) Gemmi 0.5.6 Relion 4.0-beta-2-commit-c3ddd0","title":"Malate dehydrogenase"},{"location":"gallery/synthetic/#alter-occupancy-of-pdb-model","text":"Altered occupancy of one pdb model chain, generate theoretical density and estimate occupancy of the density using OccuPp","title":"Alter occupancy of pdb model"},{"location":"gallery/synthetic/#setup","text":"Use a bash terminal to make a tamplate for occupancy and b-factor modification.","title":"Setup"},{"location":"gallery/synthetic/#get-and-prep-files","text":"wget https://files.rcsb.org/download/1UXI.pdb sed -n '/^ATOM/q;p' 1UXI_noWater.pdb > header.pdb grep ^ATOM 1UXI_noWater.pdb | grep \" A \" > chain_A.pdb grep ^ATOM 1UXI_noWater.pdb | grep \" B \" > chain_B.pdb grep ^HETATM 1UXI_noWater.pdb > chain_NAD_FUM.pdb To alter the occupancy (to 40%) of atoms in chain A of the model: cat header.pdb > 1UXI_occ_template.pdb sed 's/^\\(.\\{57\\}\\).\\{4\\}/\\1xOc /' chain_A.pdb >> 1UXI_occ_template.pdb echo \"TER\" >> 1UXI_occ_template.pdb cat chain_B.pdb >> 1UXI_occ_template.pdb echo \"TER\" >> 1UXI_occ_template.pdb cat chain_NAD_FUM.pdb >> 1UXI_occ_template.pdb echo \"END\" >> 1UXI_occ_template.pdb Generate the density using gemmi, and format it using relion sed 's/1xOc/0.40/g' 1UXI_occ_template.pdb > 1UXI_occ_0.40.pdb ~/install/gemmi/gemmi sfcalc --dmin=10 1UXI_occ_0.40.pdb --write-map=raw.mrc --for=electron --unknown=O --rate 3 > log.txt relion_image_handler --new_box 100 --i raw.mrc --o cube.mrc --shift_x -5 --shift_y -5 --shift_z -15 relion_image_handler --i cube.mrc --o equal.mrc --rescale_angpix 1.66 relion_image_handler --i equal.mrc --lowpass 4 --o 1UXI_occ0.40_LP4.mrc Estimate scale and amplify, and open in chimera occupy -i 1UXI_occ0.40_LP4.mrc --occupancy -am 30 --show-chimerax chimerax chimX_1UXI_occ0.40_LP4.cxc 1UXI_occ_0.40.pdb In chimeraX, the input pdb with altered occupancies should be opened as #6. fitmap #6 inMap #3 molmap #6 20 volume #7 level 0.0545 volume mask #3 surfaces #7 scale_color #8 #2 hide #1 hide #6 models hide #7","title":"Get and prep files"},{"location":"gallery/synthetic/#alter-b-factors-of-pdb-model","text":"To alter B-factors (to 200\u00c5) of the chain A of the model instead of occupancy: cat header.pdb > 1UXI_bfac_template.pdb sed 's/^\\(.\\{62\\}\\).\\{5\\}/\\1xBfa /' chain_A.pdb >> 1UXI_bfac_template.pdb echo \"TER\" >> 1UXI_bfac_template.pdb cat chain_B.pdb >> 1UXI_bfac_template.pdb echo \"TER\" >> 1UXI_bfac_template.pdb cat chain_NAD_FUM.pdb >> 1UXI_bfac_template.pdb echo \"END\" >> 1UXI_bfac_template.pdb Generate the pdb-file with altered b-factors, to be used as uinput to gemmi sed 's/1Bfac/200.0/g' 1UXI_bfac_template.pdb > 1UXI_bfac_200.pdb After this point, use the same procedure as described above for occupancy","title":"Alter B-factors of pdb model"}]}