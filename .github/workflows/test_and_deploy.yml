name: tests

on:
  push:
    branches:
      - master
      - main
      - test_build
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - master
      - main
      - test_build
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ ubuntu-latest ]
        python-version: [ "3.8", "3.9", "3.10" ]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools pytest
          pip install -e .
      - name: Test with pytest
        run: pytest
        env:
          PLATFORM: ${{ matrix.platform }}

      - name: Coverage
        uses: codecov/codecov-action@v1

#  build:
#    strategy:
#      matrix:
#        os: [ windows-latest ] #[ macos-latest, ubuntu-latest, windows-latest ]
#
#    runs-on: ${{ matrix.os }}
#    if: contains(github.ref, 'tags')
#    steps:
#      - name: Check-out repository
#        uses: actions/checkout@v3
#
#      - name: Setup Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.10'
#          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
#          cache: 'pip'
#
#      - name: Install Dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install setuptools pytest
#          pip install -e .
#      - name: Build Executable
#        uses: Nuitka/Nuitka-Action@v0.4
#        with:
#          script-name: occupy_lib/occupy_gui.py
#          onefile: true
#          enable-plugins: pyqt5, numpy
#          include-module: scipy.fft, scipy.optimize, scipy.ndimage
#
#      - name: Upload Artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ runner.os }} Build
#          path: |
#            build/*.exe
#            build/*.bin
#            build/*.app/**/*

  deploy:
    # this will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [ test ]
    runs-on: ubuntu-latest
    #if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine build
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python -m build
        # twine upload dist/*